import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class LastUpdateComponent {
    transform(source, data, args) {
        this.source = source;
        this.showIcon = (args?.length > 0 && args[0] === 'true');
    }
    formatDate() {
        const currentDate = new Date();
        const minute = 60000; // one minute
        const hour = 3600000; // one hour limit
        const day = 86400000; // 24 hours limit
        const week = 604800000; // 7 days limit
        const month = 604800000 * 4; // 7 days limit
        const year = 604800000 * 52; // 7 days limit
        let result = "";
        let diff = currentDate.getTime() - this.source.getTime();
        if (diff <= minute) { // up to a minute
            result = "seconds ago";
        }
        else if (diff <= hour) { // up to an hour
            let minutes = Math.floor(diff / minute);
            let seconds = Math.floor((diff - (minutes * minute)) / 1000);
            result = (minutes < 2 ? "a minute" : minutes + " minutes ") + (seconds > 0 ? " and " + seconds + " seconds ago" : " ago");
        }
        else if (diff <= day) { // up to a day
            let hours = Math.floor(diff / hour);
            let minutes = Math.floor((diff - (hours * hour)) / minute);
            result = (hours < 2 ? "an hour" : hours + " hours ") + (minutes > 0 ? " and " + minutes + " minutes ago" : " ago");
        }
        else if (diff <= week) { // up to a week
            let days = Math.floor(diff / day);
            let hours = Math.floor((diff - (days * day)) / hour);
            result = (days < 2 ? "a day" : days + " days ") + (hours > 0 ? " and " + hours + " hours ago" : " ago");
        }
        else if (diff <= month) { // up to a month
            let weeks = Math.floor(diff / week);
            let days = Math.floor((diff - (weeks * week)) / day);
            result = (weeks < 2 ? "a week" : weeks + " weeks ") + (days > 0 ? " and " + days + " days ago" : " ago");
        }
        else if (diff <= year) { // up to a week
            let months = Math.floor(diff / month);
            let weeks = Math.floor((diff - (months * month)) / week);
            result = (months < 2 ? "a month" : months + " months ") + (weeks > 0 ? " and " + weeks + " weeks ago" : " ago");
        }
        else {
            let years = Math.floor(diff / year);
            let months = Math.floor((diff - (years * year)) / month);
            result = (years < 2 ? "a year" : years + " years ") + (months > 0 ? " and " + months + " months ago" : " ago");
        }
        return result;
    }
}
LastUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LastUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: LastUpdateComponent, selector: "lastupdate-component", ngImport: i0, template: `
    <span *ngIf="showIcon" class="fa fa-clock-o" aria-hidden="true"></span>
    <span>{{formatDate()}}</span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px;position:relative}.fa{margin:0 5px 0 0}@media print{:host .fa-clock-o{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lastupdate-component', template: `
    <span *ngIf="showIcon" class="fa fa-clock-o" aria-hidden="true"></span>
    <span>{{formatDate()}}</span>
    `, styles: [":host{display:table;float:left;min-height:23px;position:relative}.fa{margin:0 5px 0 0}@media print{:host .fa-clock-o{display:none}}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,