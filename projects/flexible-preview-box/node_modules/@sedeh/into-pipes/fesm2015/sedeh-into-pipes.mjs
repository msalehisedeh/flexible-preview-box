import * as i0 from '@angular/core';
import { EventEmitter, Component, Pipe, Injectable, NgModule, CUSTOM_ELEMENTS_SCHEMA, Inject, Output, ViewChild, HostListener, Directive, Input } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule, DatePipe, CurrencyPipe, DecimalPipe, JsonPipe, SlicePipe, UpperCasePipe, LowerCasePipe } from '@angular/common';
import * as i1$1 from '@angular/platform-browser';

class AddressComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.isLink = args.length ? args[0] : true;
        this.hasTarget = args.length > 1 ? args[1] : false;
        this.addr1 = source.street + ', ' + source.suite;
        this.addr2 = source.city + ', ' + source.zipcode;
        if (this.isLink) {
            const x = "https://maps.google.com/?q=" + source.street + ", " + this.addr2 + "&ie=UTF-8";
            this.url = x.replace("\\s+", "+");
        }
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            item: event.type
        });
    }
}
AddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: AddressComponent, selector: "address-component", ngImport: i0, template: `
    <a *ngIf="isLink" 
        [href]="url" 
        [target]="hasTarget ? '_blank' : null"
        class="google-map" 
        (keyup)='keyup($event)' 
        (click)="change($event)">
        <span class="fa fa-map-marker" aria-hidden="true"></span>
        <span class="off-screen">View in google map</span>
        <span class="address" [textContent]="addr1"></span>
        <span class="address" [textContent]="addr2"></span>
    </a>
    <span *ngIf="!isLink" class="google-map">
        <span class="fa fa-map-marker" aria-hidden="true"></span>
        <span class="address" [textContent]="addr1"></span>
        <span class="address" [textContent]="addr2"></span>
    </span>
    `, isInline: true, styles: [":host .address{float:left;margin-right:4px}:host .google-map{float:left;margin-right:4px}:host .fa{float:left;color:red;margin:0 5px}:host .off-screen{position:absolute;left:-999em}:host a:hover .fa-map-marker{color:#fabdab}:host span{float:left}:host{display:table;float:left;min-height:23px}@media print{:host{text-decoration:none}:host .fa-map-marker{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressComponent, decorators: [{
            type: Component,
            args: [{ selector: 'address-component', template: `
    <a *ngIf="isLink" 
        [href]="url" 
        [target]="hasTarget ? '_blank' : null"
        class="google-map" 
        (keyup)='keyup($event)' 
        (click)="change($event)">
        <span class="fa fa-map-marker" aria-hidden="true"></span>
        <span class="off-screen">View in google map</span>
        <span class="address" [textContent]="addr1"></span>
        <span class="address" [textContent]="addr2"></span>
    </a>
    <span *ngIf="!isLink" class="google-map">
        <span class="fa fa-map-marker" aria-hidden="true"></span>
        <span class="address" [textContent]="addr1"></span>
        <span class="address" [textContent]="addr2"></span>
    </span>
    `, styles: [":host .address{float:left;margin-right:4px}:host .google-map{float:left;margin-right:4px}:host .fa{float:left;color:red;margin:0 5px}:host .off-screen{position:absolute;left:-999em}:host a:hover .fa-map-marker{color:#fabdab}:host span{float:left}:host{display:table;float:left;min-height:23px}@media print{:host{text-decoration:none}:host .fa-map-marker{display:none}}\n"] }]
        }] });

/*
* Defines a filter to convert url into an address display.
*/
class AddressPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            return new AddressPipe().transform(content, args.length > 1 ? args[1] === 'true' : true);
        };
        return x;
    }
    transform(source, ...args) {
        const isLink = args.length ? args[0] : true;
        const hasTarget = args.length > 1 ? args[1] : false;
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.addressFromString(source, isLink, hasTarget);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.addressFromString(item, isLink, hasTarget));
            });
            return result;
        }
    }
    addressFromString(source, isLink, hasTarget) {
        if (isLink) {
            let url = "https://maps.google.com/?q=" +
                source.street + ", " + source.city + ", " + source.zipcode + "&ie=UTF-8";
            url = url.replace("\\s+", "+");
            return "<a href=\'" + url + "\' " +
                (hasTarget ? "target='_blank'" : "") +
                "class='google-map'><span class='fa fa-map-marker' aria-hidden='true'>" +
                "</span><span class='off-screen'>View in google map</span><span class='address'>" +
                source.street + ", " + source.suite + "</span>" +
                "<span class='address'> " + source.city + ", " + source.zipcode + "</span></a>";
        }
        return "<span class='google-map'><span class='fa fa-map-marker' style='margin: 0 5px' aria-hidden='true'>" +
            "</span><span class='address'>" + source.street + ", " + source.suite + "</span>" +
            "<span class='address'> " + source.city + ", " + source.zipcode + "</span></span>";
    }
}
AddressPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
AddressPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: AddressPipe, name: "address" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'address' }]
        }] });

class ComponentPool {
    constructor() {
        this.registeredPipes = {};
        this.registeredComponents = {};
        this.registeredServices = {};
    }
    registerPipeTransformation(name, pipe) {
        this.registeredPipes[name] = pipe;
    }
    registeredForPipeTransformationNamed(key) {
        return this.registeredPipes[key] !== undefined;
    }
    registeredPipeTransformation(key, content, args, callback, data) {
        const pipe = this.registeredPipes[key];
        return pipe ? pipe(content, args, callback, data) : null;
    }
    removePipeTransformation(key) {
        delete this.registeredPipes[key];
    }
    registerComponent(name, component) {
        this.registeredComponents[name] = component;
    }
    registeredForComponentWithNamed(name) {
        return this.registeredComponents[name] !== undefined;
    }
    registeredComponent(name, resolver, viewRefrence, el) {
        const component = name ? this.registeredComponents[name] : undefined;
        let result;
        if (component) {
            let componentFactory = resolver.resolveComponentFactory(component);
            const componentRef = viewRefrence.createComponent(componentFactory);
            const domElem = componentRef.hostView.rootNodes[0];
            el.appendChild(domElem);
            domElem.setAttribute("class", "into");
            result = componentRef.instance;
        }
        return result;
    }
    removeComponent(name) {
        delete this.registeredComponents[name];
    }
    registerServiceForComponent(name, service) {
        this.registeredServices[name] = service;
    }
    registeredServiceForComponent(name) {
        return this.registeredServices[name];
    }
    registeredForServiceNamed(name) {
        return this.registeredServices[name] !== undefined;
    }
    removeServiceForComponent(name) {
        delete this.registeredServices[name];
    }
}
ComponentPool.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ComponentPool, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ComponentPool.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ComponentPool });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ComponentPool, decorators: [{
            type: Injectable
        }] });

class AddressIntoPipeModule {
    static forRoot() {
        return {
            ngModule: AddressIntoPipeModule,
            providers: [
                AddressPipe
            ]
        };
    }
    constructor(pool) {
        pool.registerComponent('address', AddressComponent);
        pool.registerPipeTransformation('address', AddressPipe.transformationMethod());
    }
}
AddressIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
AddressIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: AddressIntoPipeModule, declarations: [AddressComponent, AddressPipe], imports: [CommonModule], exports: [AddressComponent, AddressPipe] });
AddressIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AddressIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [AddressComponent, AddressPipe],
                    exports: [AddressComponent, AddressPipe],
                    entryComponents: [AddressComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class AudioComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
    }
    isPlaying(audio) {
        return !!(audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2);
    }
    keyup(event) {
        const code = event.which;
        if (code === 13) {
            if (this.isPlaying(event.target)) {
                event.target.pause();
            }
            else {
                event.target.play();
            }
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: event.type,
            item: {
                autoplay: event.target.autoplay,
                controls: event.target.controls,
                duration: event.target.duration,
                currentTime: event.target.currentTime,
                ended: event.target.ended,
                error: event.target.error,
                paused: event.target.paused,
                muted: event.target.muted,
                defaultMuted: event.target.defaultMuted,
                volume: event.target.volume
            }
        });
    }
}
AudioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AudioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: AudioComponent, selector: "audio-component", ngImport: i0, template: `
    <span class="audio-hidden" [innerText]="source"></span>
    <audio [src]="source" 
        (keyup)="keyup($event)"
        (play)="change($event)"
        (ended)="change($event)"
        (pause)="change($event)"
        (seeked)="change($event)"
        (error)="change($event)"
        controls="true">Your browser does not support the audio element.</audio>`, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host .audio-hidden{display:none}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'audio-component', template: `
    <span class="audio-hidden" [innerText]="source"></span>
    <audio [src]="source" 
        (keyup)="keyup($event)"
        (play)="change($event)"
        (ended)="change($event)"
        (pause)="change($event)"
        (seeked)="change($event)"
        (error)="change($event)"
        controls="true">Your browser does not support the audio element.</audio>`, styles: [":host{display:table;float:left;min-height:23px}:host .audio-hidden{display:none}\n"] }]
        }] });

/*
* Defines a filter to convert url into an image display.
* if transforming object is an array, all elements in the array will be transformed and the resulting array will be returned.
*/
class AudioPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            return new AudioPipe().transform(content, args.length > 1 ? args[1] === 'true' : true);
        };
        return x;
    }
    stringToAudio(source) {
        return "<audio src=\'" + source + "\' controls=\'true\' />";
    }
    arrayToAudio(sources) {
        const result = [];
        sources.map((source) => {
            result.push(this.stringToAudio(source));
        });
        return result;
    }
    transform(source, ...args) {
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.stringToAudio(source);
        }
        return this.arrayToAudio(source);
    }
}
AudioPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
AudioPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: AudioPipe, name: "audio" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'audio' }]
        }] });

class AudioIntoPipeModule {
    static forRoot() {
        return {
            ngModule: AudioIntoPipeModule,
            providers: [
                AudioPipe
            ]
        };
    }
    constructor(pool) {
        pool.registerComponent('audio', AudioComponent);
        pool.registerPipeTransformation('audio', AudioPipe.transformationMethod());
    }
}
AudioIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
AudioIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: AudioIntoPipeModule, declarations: [AudioComponent, AudioPipe], imports: [CommonModule], exports: [AudioComponent, AudioPipe] });
AudioIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AudioIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [AudioComponent, AudioPipe],
                    exports: [AudioComponent, AudioPipe],
                    entryComponents: [AudioComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

/* calendar code is copied from "ben tedder"
* http://www.bentedder.com/create-calendar-grid-component-angular-4/
*/
class CalendarComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.showCalendar = false;
        this.editName = false;
        this.multiselect = false;
        this.dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.weeks = [];
        this.selectedDays = [];
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        event.stopPropagation();
        event.preventDefault();
        const code = event.which;
        if (code === 13) {
            event.target.click();
        }
    }
    popdatepicker(event) {
        event.stopPropagation();
        event.preventDefault();
        this.showCalendar = !this.showCalendar;
    }
    transform(source, data, args) {
        this.source = source;
        this.currentDate = new Date();
        this.origDate = new Date();
        if (source instanceof Array) {
            this.multiselect = true;
            source.map((item) => {
                this.selectedDays.push(new Date(item));
            });
        }
        else {
            this.multiselect = false;
            this.selectedDays.push(new Date(this.source));
        }
        this.item = data;
        this.generateCalendar();
        this.formatting = (args && args.length) ? args[0] : "";
    }
    isSelected(date) {
        let index = -1;
        for (let i = 0; i < this.selectedDays.length; i++) {
            const selectedDate = this.selectedDays[i];
            if (this.isSameDay(date, selectedDate)) {
                index = i;
            }
        }
        return index > -1;
    }
    isSelectedMonth(date) {
        return this.isSameMonth(date, this.currentDate);
    }
    toggleSelectedDates(day) {
        let found = false;
        if (this.multiselect) {
            for (let i = 0; i < this.selectedDays.length; i++) {
                const date = this.selectedDays[i];
                if (this.isSameDay(day.date, date)) {
                    this.selectedDays.splice(i, 1);
                    found = true;
                    day.selected = false;
                    break;
                }
            }
            if (!found) {
                this.selectedDays.push(day.date);
                day.selected = true;
            }
        }
        else {
            this.selectedDays = [day.date];
            day.selected = true;
        }
    }
    selectDate(event, day) {
        event.stopPropagation();
        event.preventDefault();
        this.origDate = day.date;
        this.currentDate = day.date;
        this.toggleSelectedDates(day);
        this.selectedDays.sort((a, b) => {
            return a > b ? -1 : 1;
        });
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.selectedDays,
            type: "select",
            item: this.item
        });
        this.showCalendar = false;
        this.generateCalendar();
    }
    // actions from calendar
    prevMonth(event) {
        event.stopPropagation();
        event.preventDefault();
        this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, this.currentDate.getDate());
        this.generateCalendar();
    }
    nextMonth(event) {
        event.stopPropagation();
        event.preventDefault();
        this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, this.currentDate.getDate());
        this.generateCalendar();
    }
    prevYear(event) {
        event.stopPropagation();
        event.preventDefault();
        this.currentDate = new Date(this.currentDate.getFullYear() - 1, this.currentDate.getMonth(), this.currentDate.getDate());
        this.generateCalendar();
    }
    nextYear(event) {
        event.stopPropagation();
        event.preventDefault();
        this.currentDate = new Date(this.currentDate.getFullYear() + 1, this.currentDate.getMonth(), this.currentDate.getDate());
        this.generateCalendar();
    }
    // generate the calendar grid
    generateCalendar() {
        const dates = this.fillDates(this.currentDate);
        const weeks = [];
        while (dates.length > 0) {
            weeks.push(dates.splice(0, 7));
        }
        this.weeks = weeks;
    }
    isSameDay(a, b) {
        return a.getFullYear() === b.getFullYear() &&
            a.getMonth() === b.getMonth() &&
            a.getDate() === b.getDate();
    }
    isSameMonth(a, b) {
        return a.getYear() === b.getYear() &&
            a.getMonth() === b.getMonth();
    }
    fillDates(currentDate) {
        const cm = new Date(currentDate);
        const tm = new Date();
        const firstDay = new Date(cm.getFullYear(), cm.getMonth(), 1);
        const firstOfMonth = firstDay.getDay();
        const firstDayOfGrid = new Date(firstDay.getFullYear(), firstDay.getMonth(), firstDay.getDate() - firstOfMonth);
        const start = firstDayOfGrid.getDate();
        const list = [];
        for (let i = start; i < (start + 42); i++) {
            const d = new Date(firstDayOfGrid.getFullYear(), firstDayOfGrid.getMonth(), i);
            list.push({
                today: this.isSameDay(tm, d),
                selected: this.isSelected(d),
                date: d
            });
        }
        return list;
    }
}
CalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CalendarComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
CalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: CalendarComponent, selector: "calendar-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, ngImport: i0, template: `
    <span class="calendar-box">
      <span class="date" [textContent]="origDate | date:formatting"></span>
      <a tabindex="0" class="popper" (keyup)="keyup($event)" (click)="popdatepicker($event)">
          <span class="fa fa-calendar" aria-hidden="true"></span>
          <span class="off-screen">Pick a date</span>
      </a>
    </span>
    <div class="calendar" *ngIf="showCalendar">
		<div class="calendar-navs">
			<div class="month-nav">
                <button (click)="prevMonth($event)">
                    <span class="fa fa-chevron-left"></span>
                    <span class="off-screen">Back a month</span>
                </button>
				<span class="p4">{{ currentDate | date:'MMMM' }}</span>
                <button (click)="nextMonth($event)">
                    <span class="fa fa-chevron-right"></span>
                    <span class="off-screen">Forward a month</span>
                </button>
			</div>
			<div class="year-nav">
                <button (click)="prevYear($event)">
                    <span class="fa fa-chevron-left"></span>
                    <span class="off-screen">Back a year</span>
                </button>
				<span>{{ currentDate | date: 'yyyy' }}</span>
                <button (click)="nextYear($event)">
                    <span class="fa fa-chevron-right"></span>
                    <span class="off-screen">Forward a year</span>
                </button>
			</div>
		</div>
		<div class="month-grid">
			<div class="day-names">
				<div *ngFor="let name of dayNames" class="day-name p9">{{ name }}</div>
			</div>
			<div class="weeks">
				<div *ngFor="let week of weeks" class="week">
					<ng-container *ngFor="let day of week">
						<div class="week-date disabled" *ngIf="!isSelectedMonth(day.date)">
							<span class="date-text">{{ day.date.getDate() }}</span>
						</div>
						<div class="week-date enabled"
                           *ngIf="isSelectedMonth(day.date)"
                           tabindex="0"
                           (keyup)="keyup($event)"
						   (click)="selectDate($event, day)"
						   [class.today]="day.today"
						   [class.selected]="day.selected">
							<span class="date-text">{{ day.date.getDate() }}</span>
						</div>
					</ng-container>
				</div>
			</div>
		</div>
	</div>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}.popper .fa-calendar{display:inline-block;margin:0 5px}.popper:hover .fa-calendar{color:#fabdab}.calendar-box{display:flex;flex-direction:row;cursor:default;width:100%;display:inline-block}.calendar-box date{flex:1}.calendar-box .popper{cursor:pointer;flex:0 0 15px}.calendar{display:table;width:210px;position:absolute;background-color:#fff;z-index:2;border:1px solid #ddd;border-radius:4px}.calendar *{box-sizing:border-box}.calendar .calendar-navs{background-color:#f5f5f5}.calendar .month-nav,.calendar .year-nav{padding:2px;display:flex;flex-direction:row;justify-content:space-between}.calendar .month-nav button,.calendar .year-nav button{border:0;background:transparent;cursor:pointer}.calendar .month-nav button:hover,.calendar .year-nav button:hover{color:red}.calendar .month-grid .day-names{display:flex;flex-direction:row;background:whitesmoke;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.calendar .month-grid .weeks{display:flex;flex-direction:column}.calendar .month-grid .week{display:flex;flex-direction:row}.calendar .month-grid .day-names{border-top:1px dotted #ddd;border-bottom:1px dashed #ddd}.calendar .month-grid .week-date,.calendar .month-grid .day-name{text-align:center;padding:2px;display:block;width:30px;display:flex;justify-content:center;align-items:center}.calendar .month-grid .week-date{height:30px;position:relative;padding:5px}.calendar .month-grid .week-date .date-text{font-size:10px;z-index:10}.calendar .month-grid .week-date:after{content:\"\";height:24px;width:24px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);border-radius:50%;transition:background-color .15s linear,color .15s linear;z-index:1}.calendar .month-grid .week-date.disabled{color:#aaa}.calendar .month-grid .week-date.enabled{cursor:pointer}.calendar .month-grid .week-date.enabled:focus{outline:0}.calendar .month-grid .week-date.enabled:hover .date-text,.calendar .month-grid .week-date.enabled:focus .date-text{font-weight:700;color:#00f}.calendar .month-grid .week-date.enabled:hover:after,.calendar .month-grid .week-date.enabled:focus:after{background-color:#f5f5f5}.calendar .month-grid .week-date.selected .date-text{color:#fff!important}.calendar .month-grid .week-date.selected:after{background-color:#00f!important}.calendar .month-grid .week-date.today:after{background-color:#add8e6;font-weight:700;color:#fff}@media print{.calendar-box .popper{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.DatePipe, name: "date" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'calendar-component', template: `
    <span class="calendar-box">
      <span class="date" [textContent]="origDate | date:formatting"></span>
      <a tabindex="0" class="popper" (keyup)="keyup($event)" (click)="popdatepicker($event)">
          <span class="fa fa-calendar" aria-hidden="true"></span>
          <span class="off-screen">Pick a date</span>
      </a>
    </span>
    <div class="calendar" *ngIf="showCalendar">
		<div class="calendar-navs">
			<div class="month-nav">
                <button (click)="prevMonth($event)">
                    <span class="fa fa-chevron-left"></span>
                    <span class="off-screen">Back a month</span>
                </button>
				<span class="p4">{{ currentDate | date:'MMMM' }}</span>
                <button (click)="nextMonth($event)">
                    <span class="fa fa-chevron-right"></span>
                    <span class="off-screen">Forward a month</span>
                </button>
			</div>
			<div class="year-nav">
                <button (click)="prevYear($event)">
                    <span class="fa fa-chevron-left"></span>
                    <span class="off-screen">Back a year</span>
                </button>
				<span>{{ currentDate | date: 'yyyy' }}</span>
                <button (click)="nextYear($event)">
                    <span class="fa fa-chevron-right"></span>
                    <span class="off-screen">Forward a year</span>
                </button>
			</div>
		</div>
		<div class="month-grid">
			<div class="day-names">
				<div *ngFor="let name of dayNames" class="day-name p9">{{ name }}</div>
			</div>
			<div class="weeks">
				<div *ngFor="let week of weeks" class="week">
					<ng-container *ngFor="let day of week">
						<div class="week-date disabled" *ngIf="!isSelectedMonth(day.date)">
							<span class="date-text">{{ day.date.getDate() }}</span>
						</div>
						<div class="week-date enabled"
                           *ngIf="isSelectedMonth(day.date)"
                           tabindex="0"
                           (keyup)="keyup($event)"
						   (click)="selectDate($event, day)"
						   [class.today]="day.today"
						   [class.selected]="day.selected">
							<span class="date-text">{{ day.date.getDate() }}</span>
						</div>
					</ng-container>
				</div>
			</div>
		</div>
	</div>
    `, styles: [":host{display:table;float:left;min-height:23px}.popper .fa-calendar{display:inline-block;margin:0 5px}.popper:hover .fa-calendar{color:#fabdab}.calendar-box{display:flex;flex-direction:row;cursor:default;width:100%;display:inline-block}.calendar-box date{flex:1}.calendar-box .popper{cursor:pointer;flex:0 0 15px}.calendar{display:table;width:210px;position:absolute;background-color:#fff;z-index:2;border:1px solid #ddd;border-radius:4px}.calendar *{box-sizing:border-box}.calendar .calendar-navs{background-color:#f5f5f5}.calendar .month-nav,.calendar .year-nav{padding:2px;display:flex;flex-direction:row;justify-content:space-between}.calendar .month-nav button,.calendar .year-nav button{border:0;background:transparent;cursor:pointer}.calendar .month-nav button:hover,.calendar .year-nav button:hover{color:red}.calendar .month-grid .day-names{display:flex;flex-direction:row;background:whitesmoke;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.calendar .month-grid .weeks{display:flex;flex-direction:column}.calendar .month-grid .week{display:flex;flex-direction:row}.calendar .month-grid .day-names{border-top:1px dotted #ddd;border-bottom:1px dashed #ddd}.calendar .month-grid .week-date,.calendar .month-grid .day-name{text-align:center;padding:2px;display:block;width:30px;display:flex;justify-content:center;align-items:center}.calendar .month-grid .week-date{height:30px;position:relative;padding:5px}.calendar .month-grid .week-date .date-text{font-size:10px;z-index:10}.calendar .month-grid .week-date:after{content:\"\";height:24px;width:24px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);border-radius:50%;transition:background-color .15s linear,color .15s linear;z-index:1}.calendar .month-grid .week-date.disabled{color:#aaa}.calendar .month-grid .week-date.enabled{cursor:pointer}.calendar .month-grid .week-date.enabled:focus{outline:0}.calendar .month-grid .week-date.enabled:hover .date-text,.calendar .month-grid .week-date.enabled:focus .date-text{font-weight:700;color:#00f}.calendar .month-grid .week-date.enabled:hover:after,.calendar .month-grid .week-date.enabled:focus:after{background-color:#f5f5f5}.calendar .month-grid .week-date.selected .date-text{color:#fff!important}.calendar .month-grid .week-date.selected:after{background-color:#00f!important}.calendar .month-grid .week-date.today:after{background-color:#add8e6;font-weight:700;color:#fff}@media print{.calendar-box .popper{display:none}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class CalendarIntoPipeModule {
    static forRoot() {
        return {
            ngModule: CalendarIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('calendar', CalendarComponent);
    }
}
CalendarIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CalendarIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
CalendarIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: CalendarIntoPipeModule, declarations: [CalendarComponent], imports: [CommonModule], exports: [CalendarComponent] });
CalendarIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CalendarIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CalendarIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [CalendarComponent],
                    exports: [CalendarComponent],
                    entryComponents: [CalendarComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class CheckboxComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        const code = event.which;
        if (code === 13) {
            event.target.click();
        }
    }
    click(event) {
        const input = event.target;
        event.stopPropagation();
        event.preventDefault();
        if (this.source === this.ideal) {
            this.source = this.original;
        }
        else {
            this.source = this.ideal;
        }
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "check",
            item: this.data
        });
        if (this.useFont) {
            setTimeout(() => {
                if (this.check) {
                    this.check.nativeElement.focus();
                }
                if (this.uncheck) {
                    this.uncheck.nativeElement.focus();
                }
            }, 66);
        }
    }
    transform(source, data, args) {
        this.ideal = args.length ? String(args[0]) : "";
        this.useFont = args.length > 1 ? Boolean(args[1]) : false;
        this.onOff = args.length > 2 ? Boolean(args[2]) : false;
        this.source = String(source);
        this.data = data;
        this.original = this.source === this.ideal ? "" : source;
    }
}
CheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: CheckboxComponent, selector: "checkbox-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, viewQueries: [{ propertyName: "check", first: true, predicate: ["check"], descendants: true }, { propertyName: "uncheck", first: true, predicate: ["uncheck"], descendants: true }], ngImport: i0, template: `
    <span *ngIf="useFont" class="check-font">
      <span *ngIf="source === ideal" 
          #check tabindex="0" 
          class="fa" 
          [class.fa-toggle-on]="onOff" 
          [class.fa-check]="!onOff" 
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span *ngIf="source !== ideal"
          #uncheck tabindex="0" 
          class="fa" 
          [class.fa-toggle-off]="onOff" 
          [class.fa-close]="!onOff" 
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
    </span>
    <input *ngIf="!useFont" 
            type="checkbox" 
            tabindex="0" 
            [value]="source" 
            [checked]="source===ideal ? true : null" 
            (keyup)="keyup($event)"
            (click)="click($event)" />
    `, isInline: true, styles: [":host .check-font .fa{margin:0 5px}:host{display:table;float:left;min-height:23px}.check-font:hover{color:#fabdab}.check-font{cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'checkbox-component', template: `
    <span *ngIf="useFont" class="check-font">
      <span *ngIf="source === ideal" 
          #check tabindex="0" 
          class="fa" 
          [class.fa-toggle-on]="onOff" 
          [class.fa-check]="!onOff" 
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span *ngIf="source !== ideal"
          #uncheck tabindex="0" 
          class="fa" 
          [class.fa-toggle-off]="onOff" 
          [class.fa-close]="!onOff" 
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
    </span>
    <input *ngIf="!useFont" 
            type="checkbox" 
            tabindex="0" 
            [value]="source" 
            [checked]="source===ideal ? true : null" 
            (keyup)="keyup($event)"
            (click)="click($event)" />
    `, styles: [":host .check-font .fa{margin:0 5px}:host{display:table;float:left;min-height:23px}.check-font:hover{color:#fabdab}.check-font{cursor:pointer}\n"] }]
        }], propDecorators: { check: [{
                type: ViewChild,
                args: ["check"]
            }], uncheck: [{
                type: ViewChild,
                args: ["uncheck"]
            }], onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class CheckboxIntoPipeModule {
    static forRoot() {
        return {
            ngModule: CheckboxIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('checkbox', CheckboxComponent);
    }
}
CheckboxIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
CheckboxIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: CheckboxIntoPipeModule, declarations: [CheckboxComponent], imports: [CommonModule], exports: [CheckboxComponent] });
CheckboxIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CheckboxIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [CheckboxComponent],
                    exports: [CheckboxComponent],
                    entryComponents: [CheckboxComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class EmailComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.isLink = args.length ? args[0] : true;
        this.source = source;
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "mail-to",
            item: event.type
        });
    }
}
EmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: EmailComponent, selector: "email", ngImport: i0, template: `
    <a *ngIf="isLink" [href]="'mailto:' + source" (keyup)='keyup($event)' (click)="change($event)">
        <span class='fa fa-envelope' aria-hidden='true'></span>
        <span [textContent]="source"></span>
    </a>
    <span *ngIf="!isLink">
        <span class='fa fa-envelope' aria-hidden='true'></span>
        <span [textContent]="source"></span>
    </span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host:hover .fa-envelope{color:#fabdab}:host .fa{margin:0 5px}@media print{:host a{text-decoration:none}:host a .fa-envelope{display:none}:host .fa-envelope{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'email', template: `
    <a *ngIf="isLink" [href]="'mailto:' + source" (keyup)='keyup($event)' (click)="change($event)">
        <span class='fa fa-envelope' aria-hidden='true'></span>
        <span [textContent]="source"></span>
    </a>
    <span *ngIf="!isLink">
        <span class='fa fa-envelope' aria-hidden='true'></span>
        <span [textContent]="source"></span>
    </span>
    `, styles: [":host{display:table;float:left;min-height:23px}:host:hover .fa-envelope{color:#fabdab}:host .fa{margin:0 5px}@media print{:host a{text-decoration:none}:host a .fa-envelope{display:none}:host .fa-envelope{display:none}}\n"] }]
        }] });

/*
* Defines a filter to convert url into an email display.
*/
class EmailPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // email
            return new EmailPipe().transform(content, args.length > 1 ? args[1] === 'true' : true);
        };
        return x;
    }
    emailFromString(source, isLink) {
        let x;
        if (isLink) {
            x = "<a href=\'mailto:" + source + "\' ><span class='fa fa-envelope' aria-hidden='true'></span><span>" + source + "</span></a>";
        }
        else {
            x = "<span><span class='fa fa-envelope' style='margin: 0 5px' aria-hidden='true'></span><span>" + source + "</span></span>";
        }
        return x;
    }
    transform(source, ...args) {
        const isLink = args.length ? args[0] : true;
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.emailFromString(source, isLink);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.emailFromString(item, isLink));
            });
            return result;
        }
    }
}
EmailPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
EmailPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: EmailPipe, name: "email" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'email' }]
        }] });

class EmailIntoPipeModule {
    static forRoot() {
        return {
            ngModule: EmailIntoPipeModule,
            providers: [EmailPipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('email', EmailComponent);
        pool.registerPipeTransformation('email', EmailPipe.transformationMethod());
    }
}
EmailIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
EmailIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: EmailIntoPipeModule, declarations: [EmailComponent, EmailPipe], imports: [CommonModule], exports: [EmailComponent, EmailPipe] });
EmailIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EmailIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [EmailComponent, EmailPipe],
                    exports: [EmailComponent, EmailPipe],
                    entryComponents: [EmailComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class FontComponent {
    transform(source, data, args) {
        this.source = source;
        this.font = args[0];
        this.location = args.length > 1 ? args[1] : "left";
        const action = args.length > 2 ? args[2].toLowerCase() : "";
        this.content = action === "*" ? source : ("replace" === action.toLowerCase() ? "" : source);
    }
}
FontComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FontComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: FontComponent, selector: "font-component", ngImport: i0, template: `
        <span *ngIf="location === 'left'"    [class]="font" aria-hidden='true'></span>
        <span *ngIf="location !== 'replace'" [textContent]="content"></span>
        <span *ngIf="location === 'right'"   [class]="font" aria-hidden='true'></span>
        <span *ngIf="location === 'replace'" [class]="font" aria-hidden='true'></span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host span{float:left;margin:0 5px}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontComponent, decorators: [{
            type: Component,
            args: [{ selector: 'font-component', template: `
        <span *ngIf="location === 'left'"    [class]="font" aria-hidden='true'></span>
        <span *ngIf="location !== 'replace'" [textContent]="content"></span>
        <span *ngIf="location === 'right'"   [class]="font" aria-hidden='true'></span>
        <span *ngIf="location === 'replace'" [class]="font" aria-hidden='true'></span>
    `, styles: [":host{display:table;float:left;min-height:23px}:host span{float:left;margin:0 5px}\n"] }]
        }] });

/*
* Defines a filter to convert url into an email display.
*/
class FontPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // font:fa fa-check:left:*
            return new FontPipe().transform(content, args.length > 1 ? args[1] : "", args.length > 2 ? args[2] : "", args.length > 3 ? args[3] : "");
        };
        return x;
    }
    fontFromString(font, location, action, content) {
        return (location === "left" ?
            (font + content) :
            ((location === "right") ? content + font : font));
    }
    transform(source, ...args) {
        const font = args.length ? "<span class=\'" + args[0] + "\' style='margin: 0 5px' aria-hidden='true'></span>" : "";
        const location = args.length > 1 ? args[1] : "";
        const action = args.length > 2 ? args[2].toLowerCase() : "";
        const content = action === "*" ? source : ("replace" === action.toLowerCase() ? "" : source);
        if ((typeof content === "string") || !(content instanceof Array)) {
            return this.fontFromString(font, location, action, content);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.fontFromString(font, location, action, item));
            });
            return result;
        }
    }
}
FontPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FontPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: FontPipe, name: "font" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'font' }]
        }] });

class FontIntoPipeModule {
    static forRoot() {
        return {
            ngModule: FontIntoPipeModule,
            providers: [FontPipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('font', FontComponent);
        pool.registerPipeTransformation('font', FontPipe.transformationMethod());
    }
}
FontIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
FontIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: FontIntoPipeModule, declarations: [FontComponent, FontPipe], imports: [CommonModule], exports: [FontComponent, FontPipe] });
FontIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FontIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [FontComponent, FontPipe],
                    exports: [FontComponent, FontPipe],
                    entryComponents: [FontComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class ImageComponent {
    constructor() {
        this.magnification = 0;
        this.onIntoComponentChange = new EventEmitter();
    }
    enter(event) {
        if (this.popLocation) {
            const image = event.target.children[0];
            const popper = event.target.children[1];
            const rect = image.parentNode.getBoundingClientRect();
            if (!this.origWidth && !this.origHeight) {
                this.origWidth = image.parentNode.clientWidth;
                this.origHeight = image.parentNode.clientHeight;
                image.parentNode.style.width = this.origWidth + "px";
                image.parentNode.style.height = this.origHeight + "px";
            }
            popper.parentNode.style.overflow = 'inherit';
            popper.style.display = 'table';
            switch (this.popLocation) {
                case 'left':
                    popper.style.right = (rect.width + 20) + 'px';
                    popper.style.top = (((1 - this.magnification) * this.origHeight) / 2) + 'px';
                    break;
                case 'right':
                    popper.style.left = (rect.width + 20) + 'px';
                    popper.style.top = (((1 - this.magnification) * this.origHeight) / 2) + 'px';
                    break;
                case 'top':
                    popper.style.bottom = (rect.height + 20) + 'px';
                    popper.style.left = (((1 - this.magnification) * this.origWidth) / 2) + 'px';
                    break;
                case 'bottom':
                    popper.style.top = (rect.height + 20) + 'px';
                    popper.style.left = (((1 - this.magnification) * this.origWidth) / 2) + 'px';
                    break;
            }
        }
        else if (this.magnification) {
            const image = event.target.children[0];
            if (!this.origWidth && !this.origHeight) {
                this.origWidth = image.parentNode.clientWidth;
                this.origHeight = image.parentNode.clientHeight;
                image.parentNode.style.width = this.origWidth + "px";
                image.parentNode.style.height = this.origHeight + "px";
            }
            this.width = (this.origWidth * this.magnification * 2) + 'px';
            this.height = (this.origHeight * this.magnification * 2) + 'px';
            image.style.position = "absolute";
        }
        this.change(event);
    }
    hoverOut(event) {
        if (this.popLocation) {
            const popper = event.target.children[1];
            popper.style.display = 'none';
        }
        else if (this.magnification) {
            const image = event.target.tagName === 'IMG' ? event.target : event.target.children[0];
            if (image) {
                this.width = this.origWidth + 'px';
                this.height = this.origHeight + 'px';
                image.style.position = "relative";
                image.style.left = "0";
                image.style.top = "0";
            }
        }
        this.change(event);
    }
    hoverViewPort(event) {
        if (this.magnification && !this.popLocation) {
            const image = event.target.tagName === 'IMG' ? event.target : event.target.children[0];
            if (image) {
                image.style.top = -(event.layerY * this.magnification) + "px";
                image.style.left = -(event.layerX * this.magnification) + "px";
            }
        }
    }
    transform(source, data, args) {
        this.source = source;
        this.width = (args && args.length) ? args[0] : "";
        this.height = (args && args.length > 1) ? args[1] : "";
        this.alt = (args && args.length > 2) ? args[2] : "";
        this.magnification = (args && args.length > 3) ? parseInt(args[3], 10) : 0;
        this.popLocation = (args && args.length > 4) ? args[4] : undefined;
        this.magnification = this.magnification < 0 ? 0 : this.magnification;
        if ((typeof source === "string") || !(source instanceof Array)) {
            if (!this.alt || !this.alt.length) {
                const q = source.indexOf("?");
                const t = q < 0 ? source : source.substring(0, q);
                const d = t.lastIndexOf("/");
                this.alt = d < 0 ? t : t.substring(d + 1);
            }
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: event.type,
            item: { x: event.layerX, y: event.layerY }
        });
    }
}
ImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: ImageComponent, selector: "image-component", host: { listeners: { "mouseenter": "enter($event)", "mouseout": "hoverOut($event)", "mousemove": "hoverViewPort($event)" } }, ngImport: i0, template: `<img [src]="source" 
        [style.width]="width" 
        [style.height]="height" 
        [title]="alt" /><img *ngIf="popLocation" 
        [src]="source" class='popper'
        [style.width]="(origWidth * magnification) + 'px'" 
        [style.height]="(origHeight * magnification) + 'px'" />`, isInline: true, styles: [":host{display:block;overflow:hidden;margin:0;position:relative;float:left;min-width:23px;min-height:23px}:host .popper{position:absolute;pointer-events:none;display:none;z-index:2;border:2px solid;box-shadow:3px 3px 3px #999;border-radius:4px}:host img{position:relative;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'image-component', template: `<img [src]="source" 
        [style.width]="width" 
        [style.height]="height" 
        [title]="alt" /><img *ngIf="popLocation" 
        [src]="source" class='popper'
        [style.width]="(origWidth * magnification) + 'px'" 
        [style.height]="(origHeight * magnification) + 'px'" />`, styles: [":host{display:block;overflow:hidden;margin:0;position:relative;float:left;min-width:23px;min-height:23px}:host .popper{position:absolute;pointer-events:none;display:none;z-index:2;border:2px solid;box-shadow:3px 3px 3px #999;border-radius:4px}:host img{position:relative;pointer-events:none}\n"] }]
        }], propDecorators: { enter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], hoverOut: [{
                type: HostListener,
                args: ['mouseout', ['$event']]
            }], hoverViewPort: [{
                type: HostListener,
                args: ['mousemove', ['$event']]
            }] } });

/*
* Defines a filter to convert url into an image display.
* if transforming object is an array, all elements in the array will be transformed and the resulting array will be returned.
*/
class ImagePipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // image:200px:auto:alttext OR image:200px:alternate-text OR image:200px OR image
            if (args.length > 3) {
                return new ImagePipe().transform(content, args[1], args[2], args[3]);
            }
            else if (args.length > 2) {
                return new ImagePipe().transform(content, args[1], args[2]);
            }
            else if (args.length > 1) {
                return new ImagePipe().transform(content, args[1]);
            }
            else {
                return new ImagePipe().transform(content, "");
            }
        };
        return x;
    }
    stringToImage(source, width, height, alt) {
        if (!alt || !alt.length) {
            const q = source.indexOf("?");
            const t = q < 0 ? source : source.substring(0, q);
            const d = t.lastIndexOf("/");
            alt = d < 0 ? t : t.substring(d + 1);
        }
        return "<img src=\'" + source + "\' style=\'" + width + height + "\' title=\'" + alt + "\' />";
    }
    arrayToImage(sources, width, height, alt) {
        const result = [];
        sources.map((source) => {
            result.push(this.stringToImage(source, width, height, alt));
        });
        return result;
    }
    transform(source, ...args) {
        const width = (args && args.length) ? "width: " + args[0] + ";" : "";
        const height = (args && args.length > 1) ? "height: " + args[1] + ";" : "";
        const alt = (args && args.length > 2) ? args[2] : "";
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.stringToImage(source, width, height, alt);
        }
        return this.arrayToImage(source, width, height, "");
    }
}
ImagePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImagePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ImagePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: ImagePipe, name: "image" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImagePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'image' }]
        }] });

class ImageIntoPipeModule {
    static forRoot() {
        return {
            ngModule: ImageIntoPipeModule,
            providers: [ImagePipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('image', ImageComponent);
        pool.registerPipeTransformation('image', ImagePipe.transformationMethod());
    }
}
ImageIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImageIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
ImageIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: ImageIntoPipeModule, declarations: [ImageComponent, ImagePipe], imports: [CommonModule], exports: [ImageComponent, ImagePipe] });
ImageIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImageIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ImageIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [ImageComponent, ImagePipe],
                    exports: [ImageComponent, ImagePipe],
                    entryComponents: [ImageComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class InToPipe {
    constructor(pool) {
        this.pool = pool;
    }
    transform(content, list) {
        let result = content;
        list.split("|").map((item) => {
            result = this._transform(result, this.split(item));
        });
        return result;
    }
    split(item) {
        const matched = item.trim().match(/(?=\S)[^"\:]*(?:"[^\\"]*(?:\\[\:\S][^\\"]*)*"[^"\:]*)*/g);
        return matched ? matched.filter((x) => x.length) : [];
    }
    _transform(content, args) {
        let result = this.pool.registeredPipeTransformation(args[0], content, args, this._transform.bind(this));
        return result ? result : content;
    }
}
InToPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InToPipe, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.Pipe });
InToPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: InToPipe, name: "into" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InToPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'into' }]
        }], ctorParameters: function () { return [{ type: ComponentPool }]; } });

class InputComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.editName = false;
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        event.stopPropagation();
        event.preventDefault();
        const code = event.which;
        if (((code >= 48) && (code <= 90)) ||
            ((code >= 96) && (code <= 111)) ||
            ((code == 32) || (code == 8)) ||
            ((code >= 186) && (code <= 222))) {
            this.source = event.target.value;
        }
        else if ((code === 13) || (code === 9) || (code === 27)) {
            this.editName = false;
            if (this.oldValue !== String(this.source)) {
                this.onIntoComponentChange.emit({
                    id: this.id,
                    name: this.name,
                    value: this.source,
                    type: "change",
                    item: this.data
                });
            }
            if (code === 13) {
                setTimeout(() => {
                    if (this.nameHolder) {
                        this.renderer.selectRootElement(this.nameHolder.nativeElement).focus();
                    }
                }, 66);
            }
        }
    }
    blur(event) {
        event.stopPropagation();
        event.preventDefault();
        this.editName = false;
        if (this.oldValue !== String(this.source)) {
            this.onIntoComponentChange.emit({
                id: this.id,
                name: this.name,
                value: this.source,
                item: this.data
            });
        }
    }
    keydown(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if ((code === 13) || (code === 9)) {
            this.renderer.selectRootElement(event.target).click();
            setTimeout(() => {
                if (this.nameEditor) {
                    this.renderer.selectRootElement(this.nameEditor.nativeElement).focus();
                }
            }, 66);
        }
    }
    clickName(event) {
        event.stopPropagation();
        event.preventDefault();
        this.editName = true;
        this.oldValue = String(this.source);
        setTimeout(() => {
            this.renderer.selectRootElement(this.nameEditor.nativeElement).focus();
        }, 66);
    }
    transform(source, data, args) {
        this.source = source;
        this.data = data;
        this.placeholder = args.length ? args[0] : "";
        this.formatting = args.length > 1 ? args[1] : "";
    }
}
InputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
InputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: InputComponent, selector: "input-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, viewQueries: [{ propertyName: "nameEditor", first: true, predicate: ["nameEditor"], descendants: true }, { propertyName: "nameHolder", first: true, predicate: ["nameHolder"], descendants: true }], ngImport: i0, template: `
    <span *ngIf="editName">
    <input #nameEditor
        type='text' 
        [id]="id"
        [name]="name"
        [value]="source"
        [placeholder]="placeholder"
        (blur)="blur($event)" 
        (keyup)='keyup($event)'>
    </span>
    <span #nameHolder
        *ngIf='!editName && formatting'
        class='locked' 
        tabindex='0' 
        (keyup)='keydown($event)'
        (click)="clickName($event)"
        [innerHTML]="source ? (source | into:formatting) : '&nbsp;'">
    </span>
    <span #nameHolder
        *ngIf='!editName && !formatting'
        class='locked' 
        tabindex='0' 
        (keyup)='keydown($event)'
        (click)="clickName($event)"
        [innerHTML]="source ? source : '&nbsp;'">
    </span>
    `, isInline: true, styles: [".locked{display:inline-block;cursor:pointer;min-width:30px;-webkit-user-select:none;user-select:none;border:1px solid transparent}input{cursor:beam}:host{display:table;float:left;min-height:23px}:host .locked:hover{border:1px solid #fabdab}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: InToPipe, name: "into" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'input-component', template: `
    <span *ngIf="editName">
    <input #nameEditor
        type='text' 
        [id]="id"
        [name]="name"
        [value]="source"
        [placeholder]="placeholder"
        (blur)="blur($event)" 
        (keyup)='keyup($event)'>
    </span>
    <span #nameHolder
        *ngIf='!editName && formatting'
        class='locked' 
        tabindex='0' 
        (keyup)='keydown($event)'
        (click)="clickName($event)"
        [innerHTML]="source ? (source | into:formatting) : '&nbsp;'">
    </span>
    <span #nameHolder
        *ngIf='!editName && !formatting'
        class='locked' 
        tabindex='0' 
        (keyup)='keydown($event)'
        (click)="clickName($event)"
        [innerHTML]="source ? source : '&nbsp;'">
    </span>
    `, styles: [".locked{display:inline-block;cursor:pointer;min-width:30px;-webkit-user-select:none;user-select:none;border:1px solid transparent}input{cursor:beam}:host{display:table;float:left;min-height:23px}:host .locked:hover{border:1px solid #fabdab}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { nameEditor: [{
                type: ViewChild,
                args: ["nameEditor"]
            }], nameHolder: [{
                type: ViewChild,
                args: ["nameHolder"]
            }], onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

/*
* Defines a filter to append character(s) to a content.
*/
class AppendPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // append:something
            return new AppendPipe().transform(content, args.length > 1 ? args[1] : "");
        };
        return x;
    }
    transform(source, ...args) {
        const key = ((args && args.length) ? args[0] : "");
        if ((typeof source === "string") || !(source instanceof Array)) {
            return source + key;
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(item + key);
            });
            return result;
        }
    }
}
AppendPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AppendPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
AppendPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: AppendPipe, name: "append" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: AppendPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'append' }]
        }] });

/*
* Defines a filter to return a transformation argument which should be piped into another transform object
* to transform the object value passed to this pipe.
* the arguments are as follows: 1) condition, 2) value to evaluate the condition, 3) action, 4) else action.
*/
class ConditionalPipe {
    static transformationMethod() {
        function split(item) {
            var _a;
            return (_a = item.trim().match(/(?=\S)[^"\:]*(?:"[^\\"]*(?:\\[\:\S][^\\"]*)*"[^"\:]*)*/g)) === null || _a === void 0 ? void 0 : _a.filter(function (x) { return x.length; });
        }
        const x = function (content, args, callback, data) {
            // if:=:true:fa fa-check:fa fa-bell
            const acondition = args.length > 1 ? args[1] : "";
            const value = args.length > 2 ? args[2] : "";
            const action = args.length > 3 ? args[3] : "";
            const altAction = args.length > 4 ? args[4] : "";
            let result = new ConditionalPipe().transform(content, acondition, value, action, altAction);
            if (typeof result === "string") {
                result = result[0] === '"' ? result.substring(1, result.length - 1) : result;
                result = split(result);
                result = callback(content, result, data);
            }
            return result;
        };
        return x;
    }
    conditionFromString(content, acondition, value, action, altAction) {
        let result = "";
        switch (acondition) {
            case "=":
                result = content === value ? action : altAction;
                break;
            case "!=":
                result = content !== value ? action : altAction;
                break;
            case ">":
                result = content > value ? action : altAction;
                break;
            case ">=":
                result = content >= value ? action : altAction;
                break;
            case "<":
                result = content < value ? action : altAction;
                break;
            case "<=":
                result = content <= value ? action : altAction;
                break;
            case "~":
                result = content !== undefined && content !== null && content !== "null" ? action : altAction;
                break;
            case "!~":
                result = content === undefined || content === null || content === "null" ? action : altAction;
                break;
            case "~=":
                result = content && value && String(content).toLowerCase() === String(value).toLowerCase() ? action : altAction;
                break;
            case "in":
                result = content ? content.indexOf(action) : altAction;
                break;
        }
        return result;
    }
    transform(source, ...args) {
        const acondition = args.length ? args[0] : "";
        const value = args.length > 1 ? args[1] : "";
        const action = args.length > 2 ? args[2] : "";
        const altAction = args.length > 3 ? args[3] : "";
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.conditionFromString(source, acondition, value, action, altAction);
        }
        else {
            const result = {};
            source.map((item) => {
                result[item] = this.conditionFromString(item, acondition, value, action, altAction);
            });
            return result;
        }
    }
}
ConditionalPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ConditionalPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ConditionalPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: ConditionalPipe, name: "if" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ConditionalPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'if' }]
        }] });

/*
* Defines a filter to join arrays or json attribute values.
*/
class JoinPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            //join or join:character
            return new JoinPipe().transform(content, args.length > 1 ? args[1] : "");
        };
        return x;
    }
    transform(source, ...args) {
        if ((typeof source === "string") || !(source instanceof Array)) {
            return source.join(args[0]);
        }
        else {
            const result = [];
            Object.keys(source).map((key) => result.push(source[key]));
            return result.join(args[0]);
        }
    }
}
JoinPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JoinPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
JoinPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: JoinPipe, name: "join" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JoinPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'join' }]
        }] });

/*
* Defines a filter to take a string as a key and returns value of key from the given map object.
*/
class MapPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // map:key1;value1/key2;value2/key3;value3
            return new MapPipe().transform(content, args.length > 1 ? args[1] : "");
        };
        return x;
    }
    valuesFor(list, map) {
        const result = [];
        list.map((key) => {
            if (map[key]) {
                result.push(map[key]);
            }
        });
        return result;
    }
    geMapping(mapping) {
        const map = mapping;
        if (mapping.trim) {
            const map = {};
            mapping.split('/').map((key) => {
                const x = key.split(';');
                map[x[0]] = x[1];
            });
            mapping = map;
        }
        return mapping;
    }
    transform(source, ...args) {
        const map = this.geMapping((args && args.length) ? args[0] : "");
        return ((typeof source === "string") || !(source instanceof Array)) ?
            map[source] :
            this.valuesFor(source, map);
    }
}
MapPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MapPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
MapPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: MapPipe, name: "map" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MapPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'map' }]
        }] });

/*
* Defines a filter to mask sensitive information.
* if transforming object is an array, all elements in the array will be masked and the resulting array will be returned.
*/
class MaskPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // mask:4:*  OR mask:4
            if (args.length > 2) {
                return new MaskPipe().transform(content, parseInt(args[1], 10), args[2]);
            }
            else if (args.length > 1) {
                return new MaskPipe().transform(content, args[1]);
            }
            else {
                return new MaskPipe().transform(content);
            }
        };
        return x;
    }
    maskString(item, visibleDigits, maskWith) {
        const maskedSection = item ? item.slice(0, -visibleDigits) : "";
        const visibleSection = item ? item.slice(-visibleDigits) : "";
        return item ? maskedSection.replace(/./g, maskWith) + visibleSection : "";
    }
    maskArray(items, visibleDigits, maskWith) {
        const result = [];
        items.map((item) => {
            result.push(this.maskString(item, visibleDigits, maskWith));
        });
        return result;
    }
    transform(source, ...args) {
        const visibleDigits = (args && args.length) ? args[0] : 4;
        const maskWith = args.length > 1 ? args[1] : '*';
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.maskString(source, visibleDigits, maskWith);
        }
        return this.maskArray(source, visibleDigits, maskWith);
    }
}
MaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
MaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: MaskPipe, name: "mask" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MaskPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'mask' }]
        }] });

/*
* Defines a filter to prepend character(s) to a content.
*/
class PrependPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // prepend:something
            return new PrependPipe().transform(content, args.length > 1 ? args[1] : "");
        };
        return x;
    }
    transform(source, ...args) {
        const key = ((args && args.length) ? args[0] : "");
        if ((typeof source === "string") || !(source instanceof Array)) {
            return key + source;
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(key + item);
            });
            return result;
        }
    }
}
PrependPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PrependPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
PrependPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: PrependPipe, name: "prepend" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PrependPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'prepend' }]
        }] });

/*
* Takes care of problem with security precausions that strip out certain characters
* from end result of your requests.
* code taken from https://stackoverflow.com/questions/39681163/angular-2-sanitizing-html-stripped-some-content-with-div-id-this-is-bug-or-fe
*/
class SanitizeHtmlPipe {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    transform(v) {
        return this._sanitizer.bypassSecurityTrustHtml(v);
    }
}
SanitizeHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SanitizeHtmlPipe, deps: [{ token: i1$1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });
SanitizeHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: SanitizeHtmlPipe, name: "sanitizeHtml" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SanitizeHtmlPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'sanitizeHtml'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DomSanitizer }]; } });

/*
* Defines a filter to convert a string into a map object.
*/
class ValueOfPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // valueof:key
            return new ValueOfPipe().transform(content, args.length > 1 ? args[1] : "");
        };
        return x;
    }
    valueOfSingle(source, key) {
        return source[key];
    }
    valueOfMultiple(sources, key) {
        const result = [];
        sources.map((source) => {
            result.push(this.valueOfSingle(source, key));
        });
        return result;
    }
    transform(object, ...args) {
        if ((typeof object === "string") || !(object instanceof Array)) {
            return this.valueOfSingle(object, args[0]);
        }
        return this.valueOfMultiple(object, args[0]);
    }
}
ValueOfPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ValueOfPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ValueOfPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: ValueOfPipe, name: "valueof" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ValueOfPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'valueof' }]
        }] });

/*
* Defines a filter to wrap a content into character(s).
*/
class WrapPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // wrap:something:something  OR wrap:something
            return new WrapPipe().transform(content, args.length > 1 ? args[1] : "", args.length > 2 ? args[2] : args[1]);
        };
        return x;
    }
    transform(source, ...args) {
        const pre = (args && args.length) ? args[0] : "";
        const post = pre.length ?
            (args.length > 1 ? args[1] : "") : pre;
        const key = ((args && args.length) ? args[0] : "");
        if ((typeof source === "string") || !(source instanceof Array)) {
            return pre + source + post;
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(pre + item + post);
            });
            return result;
        }
    }
}
WrapPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: WrapPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
WrapPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: WrapPipe, name: "wrap" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: WrapPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'wrap' }]
        }] });

class IntoDirective {
    constructor(viewRef, el, pool, componentFactoryResolver) {
        this.viewRef = viewRef;
        this.el = el;
        this.pool = pool;
        this.componentFactoryResolver = componentFactoryResolver;
        this.onComponentChange = (event) => { };
    }
    split(item) {
        var _a;
        return (_a = item.trim().match(/(?=\S)[^"\:]*(?:"[^\\"]*(?:\\[\:\S][^\\"]*)*"[^"\:]*)*/g)) === null || _a === void 0 ? void 0 : _a.filter((x) => x.length);
    }
    _transform(content, args, data) {
        let result = content;
        if (this.pool.registeredForComponentWithNamed(args[0])) {
            const newArgs = args.splice(1, args.length);
            result = this.transformComponent(args[0], content, this.intoId, this.intoName, data, ...newArgs);
        }
        else if (this.pool.registeredForPipeTransformationNamed(args[0])) {
            result = this.pool.registeredPipeTransformation(args[0], content, args, this._transform.bind(this), data);
        }
        else {
            // unknown formatter
            try {
                result = this.transformComponent(args[0], content, this.intoId, this.intoName, data, args.length > 1 ? args[1] : "", args.length > 2 ? args[2] : "", args.length > 3 ? args[3] : "", args.length > 4 ? args[4] : "", args.length > 5 ? args[5] : "");
            }
            catch (x) {
                console.error(x);
            }
        }
        return result;
    }
    transformComponent(type, content, id, name, data, ...args) {
        let result = content;
        if (content === undefined) {
            return "";
        }
        if (content instanceof Date || typeof content === "string" || typeof content === "number" || typeof content === "boolean" || Object.keys(content).length) {
            result = this.registeredComponentFor(type);
            if (result === null || result === undefined) {
                console.error("Custom component '" + type + "' is not defined.");
                result = content;
            }
            else {
                result.id = id;
                result.name = name;
                result.service = this.pool.registeredServiceForComponent(type);
                result.transform(content.source ? content.source : content, data, args);
                if (result.onIntoComponentChange && this.onComponentChange) {
                    result.onIntoComponentChange.subscribe(this.onComponentChange);
                }
            }
        }
        else if (content instanceof Array) {
            let counter = 0;
            result = content;
            content.map((source) => {
                if (typeof source === "string" ||
                    typeof content === "number" ||
                    typeof content === "boolean" ||
                    Object.keys(content).length) {
                    const sx = this.registeredComponentFor(type);
                    if (sx === null || sx === undefined) {
                        console.error("Custom component '" + type + "' is not defined.");
                    }
                    else {
                        sx.id = id + '-' + (counter++);
                        sx.name = name;
                        sx.service = this.pool.registeredServiceForComponent(type);
                        sx.transform(source.source ? source.source : source, data, args);
                        if (sx.onIntoComponentChange && this.onComponentChange) {
                            sx.onIntoComponentChange.subscribe(this.onComponentChange);
                        }
                    }
                }
            });
        }
        return result;
    }
    registeredComponentFor(name) {
        return this.pool.registeredComponent(name, this.componentFactoryResolver, this.viewRef, this.el.nativeElement);
    }
    ngOnInit() {
        if (this.into || this.rawContent) {
            let result = this.rawContent;
            if (this.into) {
                this.into.split("|").map((item) => {
                    result = this._transform(result, this.split(item), this.intoData);
                });
            }
            if (typeof result === "string") {
                const comp = this.registeredComponentFor("span");
                if (comp) {
                    comp.transform(result, [], this.intoData);
                }
                else {
                    console.error("Custom component 'span' is not defined.");
                }
            }
            else if (result instanceof Array) {
                result.map((source) => {
                    if (typeof source === "string") {
                        const comp = this.registeredComponentFor("span");
                        if (comp) {
                            comp.transform(source, [], this.intoData);
                        }
                        else {
                            console.error("Custom component 'span' is not defined.");
                        }
                    }
                });
            }
        }
    }
}
IntoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: IntoDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: ComponentPool }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });
IntoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.10", type: IntoDirective, selector: "[into]", inputs: { rawContent: "rawContent", intoId: "intoId", intoName: "intoName", intoData: "intoData", into: "into", onComponentChange: "onComponentChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: IntoDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[into]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: ComponentPool }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { rawContent: [{
                type: Input,
                args: ["rawContent"]
            }], intoId: [{
                type: Input,
                args: ["intoId"]
            }], intoName: [{
                type: Input,
                args: ["intoName"]
            }], intoData: [{
                type: Input,
                args: ["intoData"]
            }], into: [{
                type: Input,
                args: ["into"]
            }], onComponentChange: [{
                type: Input,
                args: ["onComponentChange"]
            }] } });

class CommonPipesModule {
    static forRoot() {
        return {
            ngModule: CommonPipesModule,
            providers: [
                DatePipe,
                CurrencyPipe,
                DecimalPipe,
                JsonPipe,
                SlicePipe,
                UpperCasePipe,
                LowerCasePipe,
                AppendPipe,
                ConditionalPipe,
                JoinPipe,
                MapPipe,
                MaskPipe,
                PrependPipe,
                SanitizeHtmlPipe,
                ValueOfPipe,
                WrapPipe,
                ComponentPool,
                InToPipe
            ]
        };
    }
    constructor(pool) {
        pool.registerPipeTransformation('append', AppendPipe.transformationMethod());
        pool.registerPipeTransformation('if', ConditionalPipe.transformationMethod());
        pool.registerPipeTransformation('join', JoinPipe.transformationMethod());
        pool.registerPipeTransformation('map', MapPipe.transformationMethod());
        pool.registerPipeTransformation('mask', MaskPipe.transformationMethod());
        pool.registerPipeTransformation('prepend', PrependPipe.transformationMethod());
        pool.registerPipeTransformation('valueof', ValueOfPipe.transformationMethod());
        pool.registerPipeTransformation('wrap', WrapPipe.transformationMethod());
        pool.registerPipeTransformation('slice', (content, args, callback, data) => {
            // slice 5:12 OR slice 5
            let result;
            let start = parseInt(args[1], 10);
            let end = undefined;
            if (args.length > 2) {
                end = parseInt(args[2], 10);
            }
            const slicer = new SlicePipe();
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = end ? slicer.transform(content, start, end) : slicer.transform(content, start);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(end ? slicer.transform(cnt, start, end) : slicer.transform(cnt, start));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('number', (content, args, callback, data) => {
            // number:en_US:2   or number:en_US or number
            let result;
            let numLocal = "en_US";
            let numDecimal = undefined;
            if (args.length > 2) {
                numLocal = args[1];
                numDecimal = args[2];
            }
            const decimaler = new DecimalPipe(numLocal);
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = numDecimal ? decimaler.transform(content, numDecimal) : decimaler.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(numDecimal ? decimaler.transform(cnt, numDecimal) : decimaler.transform(cnt));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('currency', (content, args, callback, data) => {
            // currency:en_US or currency
            let result;
            const cp = new CurrencyPipe(args.length > 1 ? args[1] : "en_US");
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = cp.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(cp.transform(cnt));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('lowercase', (content, args, callback, data) => {
            // lowercase
            let result;
            const lcp = new LowerCasePipe();
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = lcp.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(lcp.transform(cnt));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('uppercase', (content, args, callback, data) => {
            // uppercase
            let result;
            const ucp = new UpperCasePipe();
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = ucp.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(ucp.transform(cnt));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('json', (content, args, callback, data) => {
            // json
            let result;
            const jcp = new JsonPipe();
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = jcp.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(jcp.transform(cnt));
                });
            }
            return result;
        });
        pool.registerPipeTransformation('date', (content, args, callback, data) => {
            // date:en_US:MMddyy OR date:\"MM/dd/yyyy hh:ss\"
            // const date = ((typeof content === "string") || !(content instanceof Array)) ? new Date(content) : content;
            let result;
            let dateLocal = "en_US";
            let dateFormat = args[1];
            if (args.length > 2) {
                dateLocal = args[1];
                dateFormat = args[2];
            }
            const dater = new DatePipe(dateLocal);
            if ((typeof content === "string") || !(content instanceof Array)) {
                result = dater.transform(content);
            }
            else {
                result = [];
                content.map((cnt) => {
                    result.push(dater.transform(cnt));
                });
            }
            return result;
        });
    }
}
CommonPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CommonPipesModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
CommonPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: CommonPipesModule, declarations: [AppendPipe,
        ConditionalPipe,
        JoinPipe,
        MapPipe,
        MaskPipe,
        PrependPipe,
        SanitizeHtmlPipe,
        ValueOfPipe,
        WrapPipe,
        InToPipe,
        IntoDirective], imports: [CommonModule], exports: [AppendPipe,
        ConditionalPipe,
        JoinPipe,
        MapPipe,
        MaskPipe,
        PrependPipe,
        SanitizeHtmlPipe,
        ValueOfPipe,
        WrapPipe,
        InToPipe,
        IntoDirective] });
CommonPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CommonPipesModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: CommonPipesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        AppendPipe,
                        ConditionalPipe,
                        JoinPipe,
                        MapPipe,
                        MaskPipe,
                        PrependPipe,
                        SanitizeHtmlPipe,
                        ValueOfPipe,
                        WrapPipe,
                        InToPipe,
                        IntoDirective
                    ],
                    exports: [
                        AppendPipe,
                        ConditionalPipe,
                        JoinPipe,
                        MapPipe,
                        MaskPipe,
                        PrependPipe,
                        SanitizeHtmlPipe,
                        ValueOfPipe,
                        WrapPipe,
                        InToPipe,
                        IntoDirective
                    ],
                    entryComponents: [],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class InputIntoPipeModule {
    static forRoot() {
        return {
            ngModule: InputIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('input', InputComponent);
    }
}
InputIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
InputIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: InputIntoPipeModule, declarations: [InputComponent], imports: [CommonModule, CommonPipesModule], exports: [InputComponent] });
InputIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputIntoPipeModule, imports: [CommonModule, CommonPipesModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CommonPipesModule.forRoot()],
                    declarations: [InputComponent],
                    exports: [InputComponent],
                    entryComponents: [InputComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class InputGroupComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.onIntoComponentChange = new EventEmitter();
    }
    focused(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.type === 'radio') {
            this.source = event.target.value;
        }
        else {
            const i = this.source.indexOf(event.target.value);
            if (event.target.checked) {
                if (i < 0) {
                    this.source.push(event.target.value);
                }
            }
            else {
                this.source.splice(i, 1);
            }
        }
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "select",
            item: this.data
        });
    }
    isSelected(item) {
        const xitem = item.value ? item.value : item;
        if (this.type === 'radio') {
            return xitem === this.source;
        }
        let found = false;
        this.source.map((x) => {
            if (xitem === x) {
                found = true;
            }
        });
        return found;
    }
    transform(source, data, args) {
        this.source = source;
        this.data = data;
        this.options = this.service.getDataFor(this.name, this.id, data);
        this.type = (source instanceof Array) ? 'checkbox' : 'radio';
    }
}
InputGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputGroupComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
InputGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: InputGroupComponent, selector: "input-group-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, ngImport: i0, template: `
    <span class="input-group-item" *ngFor="let x of options; let i = index">
    <input 
      [type]="type" 
      [id]="name + i" 
      [name]="name + (type === 'radio' ? '' : i)" 
      [value]="x.value ? x.value : x" 
      [checked]="isSelected(x)"
      (focus)="focused($event)"/>
    <label [for]="name + i" [textContent]="x.label ? x.label : x"></label>
    </span>
    <span class="selected-value" [textContent]="source"></span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host .selected-value{display:none}@media print{:host .selected-value{display:block}:host .input-group-item{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'input-group-component', template: `
    <span class="input-group-item" *ngFor="let x of options; let i = index">
    <input 
      [type]="type" 
      [id]="name + i" 
      [name]="name + (type === 'radio' ? '' : i)" 
      [value]="x.value ? x.value : x" 
      [checked]="isSelected(x)"
      (focus)="focused($event)"/>
    <label [for]="name + i" [textContent]="x.label ? x.label : x"></label>
    </span>
    <span class="selected-value" [textContent]="source"></span>
    `, styles: [":host{display:table;float:left;min-height:23px}:host .selected-value{display:none}@media print{:host .selected-value{display:block}:host .input-group-item{display:none}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class InputGroupIntoPipeModule {
    static forRoot() {
        return {
            ngModule: InputGroupIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('inputgroup', InputGroupComponent);
    }
}
InputGroupIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputGroupIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
InputGroupIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: InputGroupIntoPipeModule, declarations: [InputGroupComponent], imports: [CommonModule], exports: [InputGroupComponent] });
InputGroupIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputGroupIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: InputGroupIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [InputGroupComponent],
                    exports: [InputGroupComponent],
                    entryComponents: [InputGroupComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class JsonComponent {
    transform(source, data, args) {
        this.source = source;
    }
}
JsonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JsonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
JsonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: JsonComponent, selector: "json-component", ngImport: i0, template: `<span class="json-view" [textContent]="source | json"></span>`, isInline: true, styles: [":host{display:table;float:left;min-height:23px}.json-view{display:inline-block;float:left;font-family:monospace;padding:5px;white-space:pre-wrap;unicode-bidi:embed}\n"], dependencies: [{ kind: "pipe", type: i1.JsonPipe, name: "json" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JsonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'json-component', template: `<span class="json-view" [textContent]="source | json"></span>`, styles: [":host{display:table;float:left;min-height:23px}.json-view{display:inline-block;float:left;font-family:monospace;padding:5px;white-space:pre-wrap;unicode-bidi:embed}\n"] }]
        }] });

class JsonIntoPipeModule {
    static forRoot() {
        return {
            ngModule: JsonIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('json', JsonComponent);
    }
}
JsonIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JsonIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
JsonIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: JsonIntoPipeModule, declarations: [JsonComponent], imports: [CommonModule], exports: [JsonComponent] });
JsonIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JsonIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: JsonIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [JsonComponent],
                    exports: [JsonComponent],
                    entryComponents: [JsonComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class LastUpdateComponent {
    transform(source, data, args) {
        this.source = source;
        this.showIcon = ((args === null || args === void 0 ? void 0 : args.length) > 0 && args[0] === 'true');
    }
    formatDate() {
        const currentDate = new Date();
        const minute = 60000; // one minute
        const hour = 3600000; // one hour limit
        const day = 86400000; // 24 hours limit
        const week = 604800000; // 7 days limit
        const month = 604800000 * 4; // 7 days limit
        const year = 604800000 * 52; // 7 days limit
        let result = "";
        let diff = currentDate.getTime() - this.source.getTime();
        if (diff <= minute) { // up to a minute
            result = "seconds ago";
        }
        else if (diff <= hour) { // up to an hour
            let minutes = Math.floor(diff / minute);
            let seconds = Math.floor((diff - (minutes * minute)) / 1000);
            result = (minutes < 2 ? "a minute" : minutes + " minutes ") + (seconds > 0 ? " and " + seconds + " seconds ago" : " ago");
        }
        else if (diff <= day) { // up to a day
            let hours = Math.floor(diff / hour);
            let minutes = Math.floor((diff - (hours * hour)) / minute);
            result = (hours < 2 ? "an hour" : hours + " hours ") + (minutes > 0 ? " and " + minutes + " minutes ago" : " ago");
        }
        else if (diff <= week) { // up to a week
            let days = Math.floor(diff / day);
            let hours = Math.floor((diff - (days * day)) / hour);
            result = (days < 2 ? "a day" : days + " days ") + (hours > 0 ? " and " + hours + " hours ago" : " ago");
        }
        else if (diff <= month) { // up to a month
            let weeks = Math.floor(diff / week);
            let days = Math.floor((diff - (weeks * week)) / day);
            result = (weeks < 2 ? "a week" : weeks + " weeks ") + (days > 0 ? " and " + days + " days ago" : " ago");
        }
        else if (diff <= year) { // up to a week
            let months = Math.floor(diff / month);
            let weeks = Math.floor((diff - (months * month)) / week);
            result = (months < 2 ? "a month" : months + " months ") + (weeks > 0 ? " and " + weeks + " weeks ago" : " ago");
        }
        else {
            let years = Math.floor(diff / year);
            let months = Math.floor((diff - (years * year)) / month);
            result = (years < 2 ? "a year" : years + " years ") + (months > 0 ? " and " + months + " months ago" : " ago");
        }
        return result;
    }
}
LastUpdateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LastUpdateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: LastUpdateComponent, selector: "lastupdate-component", ngImport: i0, template: `
    <span *ngIf="showIcon" class="fa fa-clock-o" aria-hidden="true"></span>
    <span>{{formatDate()}}</span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px;position:relative}.fa{margin:0 5px 0 0}@media print{:host .fa-clock-o{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lastupdate-component', template: `
    <span *ngIf="showIcon" class="fa fa-clock-o" aria-hidden="true"></span>
    <span>{{formatDate()}}</span>
    `, styles: [":host{display:table;float:left;min-height:23px;position:relative}.fa{margin:0 5px 0 0}@media print{:host .fa-clock-o{display:none}}\n"] }]
        }] });

class LastUpdateIntoPipeModule {
    static forRoot() {
        return {
            ngModule: LastUpdateIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('lastupdate', LastUpdateComponent);
    }
}
LastUpdateIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
LastUpdateIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateIntoPipeModule, declarations: [LastUpdateComponent], imports: [CommonModule], exports: [LastUpdateComponent] });
LastUpdateIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LastUpdateIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [LastUpdateComponent],
                    exports: [LastUpdateComponent],
                    entryComponents: [LastUpdateComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class LikeComponent {
    constructor() {
        this.thumbs = "";
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.data = data;
        this.showCount = ((args === null || args === void 0 ? void 0 : args.length) > 0 && args[0] === 'true');
        this.thumbsup = ((args === null || args === void 0 ? void 0 : args.length) > 1 && args[1] === 'true');
        this.key = (args && args.length > 2) ? args[2] : "";
        this.thumbs = this.thumbsup ? "thumbs-up-items" : "thumbs-down-items";
        this.selected = (this.getItem(this.data[this.key]) !== null);
    }
    keyup(event) {
        const code = event.which;
        if (code === 13) {
            event.target.click();
        }
    }
    addItem(id) {
        const saved = localStorage.getItem(this.thumbs);
        if (saved) {
            const savedItems = JSON.parse(saved);
            savedItems.push(id);
            localStorage.setItem(this.thumbs, JSON.stringify(savedItems));
        }
        else {
            localStorage.setItem(this.thumbs, JSON.stringify([id]));
        }
        this.source++;
    }
    removeItem(id) {
        const saved = localStorage.getItem(this.thumbs);
        if (saved) {
            const savedItems = JSON.parse(saved);
            const i = savedItems.indexOf(id);
            savedItems.splice(i, 1);
            localStorage.setItem(this.thumbs, JSON.stringify(savedItems));
            this.source--;
        }
    }
    getItem(id) {
        const saved = localStorage.getItem(this.thumbs);
        let found = null;
        if (saved) {
            const savedItems = JSON.parse(saved);
            const i = savedItems.indexOf(id);
            found = i < 0 ? null : savedItems[i];
        }
        return found;
    }
    formatterSource() {
        let result = this.source;
        if (this.source > 1000) {
            result = (this.source / 1000).toFixed(1) + " k";
        }
        return result;
    }
    toggleCount(event) {
        this.selected = !this.selected;
        event.stopPropagation();
        event.preventDefault();
        if (this.selected) {
            const existing = this.getItem(this.data[this.key]);
            if (!existing) {
                this.addItem(this.data[this.key]);
            }
        }
        else {
            this.removeItem(this.data[this.key]);
        }
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "change",
            item: this.data,
            selected: this.selected,
            action: this.thumbs
        });
    }
}
LikeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LikeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LikeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: LikeComponent, selector: "like-component", ngImport: i0, template: `
    <a 
        id='like-{{id}}' 
        tabindex="0" 
        class="like" 
        [class.selected]="selected" 
        (keyup)="keyup($event)" 
        (click)='toggleCount($event)'>
        <span class="fa fa-thumbs-up" *ngIf="thumbsup && !selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-up selected" *ngIf="thumbsup && selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-down" *ngIf="!thumbsup && !selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-down selected" *ngIf="!thumbsup && selected" aria-hidden="true"></span>
        <span class="counts" *ngIf="showCount" [textContent]="formatterSource()"></span>
    </a>`, isInline: true, styles: [":host{display:table;float:left;min-height:23px;position:relative}.like{cursor:pointer}.like .counts{margin-left:5px}.like .fa{margin:0}.like .fa.selected{color:green}.like:hover,.like:hover .fa,.like:hover .fa.selected{color:#fabdab}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LikeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'like-component', template: `
    <a 
        id='like-{{id}}' 
        tabindex="0" 
        class="like" 
        [class.selected]="selected" 
        (keyup)="keyup($event)" 
        (click)='toggleCount($event)'>
        <span class="fa fa-thumbs-up" *ngIf="thumbsup && !selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-up selected" *ngIf="thumbsup && selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-down" *ngIf="!thumbsup && !selected" aria-hidden="true"></span>
        <span class="fa fa-thumbs-down selected" *ngIf="!thumbsup && selected" aria-hidden="true"></span>
        <span class="counts" *ngIf="showCount" [textContent]="formatterSource()"></span>
    </a>`, styles: [":host{display:table;float:left;min-height:23px;position:relative}.like{cursor:pointer}.like .counts{margin-left:5px}.like .fa{margin:0}.like .fa.selected{color:green}.like:hover,.like:hover .fa,.like:hover .fa.selected{color:#fabdab}\n"] }]
        }] });

class LikeIntoPipeModule {
    static forRoot() {
        return {
            ngModule: LikeIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('like', LikeComponent);
    }
}
LikeIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LikeIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
LikeIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: LikeIntoPipeModule, declarations: [LikeComponent], imports: [CommonModule], exports: [LikeComponent] });
LikeIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LikeIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LikeIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [LikeComponent],
                    exports: [LikeComponent],
                    entryComponents: [LikeComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class LinkComponent {
    constructor() {
        this.poped = false;
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.target = (args && args.length) ? args[0] : "";
        this.title = (args && args.length > 1) ? args[1] : "";
        this.poper = (args && args.length > 2) ? (args[1] == 'true') : false;
        if (!this.title || !this.title.length) {
            const q = source.indexOf("?");
            const t = q < 0 ? source : source.substring(0, q);
            const d = t.lastIndexOf("/");
            this.title = d < 0 ? t : t.substring(d + 1);
        }
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    change(event) {
        this.poped = false;
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "click",
            item: event.type
        });
    }
}
LinkComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LinkComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: LinkComponent, selector: "link-component", ngImport: i0, template: `
    <a [href]="source" 
        [target]="target" 
        [textContent]="title" 
        (mouseenter)='poped = true' 
        (mouseleave)='poped = false' 
        (keyup)='keyup($event)' 
        (click)="change($event)"></a>
        <img *ngIf='poped' [src]='source' />`, isInline: true, styles: [":host{display:table;float:left;min-height:23px;position:relative}:host img{z-index:2;border:2px solid;box-shadow:3px 3px 3px #999;display:table;float:left;min-height:23px;width:250px;top:22px;position:absolute;border-radius:4px}@media print{:host a{text-decoration:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkComponent, decorators: [{
            type: Component,
            args: [{ selector: 'link-component', template: `
    <a [href]="source" 
        [target]="target" 
        [textContent]="title" 
        (mouseenter)='poped = true' 
        (mouseleave)='poped = false' 
        (keyup)='keyup($event)' 
        (click)="change($event)"></a>
        <img *ngIf='poped' [src]='source' />`, styles: [":host{display:table;float:left;min-height:23px;position:relative}:host img{z-index:2;border:2px solid;box-shadow:3px 3px 3px #999;display:table;float:left;min-height:23px;width:250px;top:22px;position:absolute;border-radius:4px}@media print{:host a{text-decoration:none}}\n"] }]
        }] });

/*
* Defines a filter to convert url into a link.
* if transforming object is an array, all elements in the array will be transformed and the resulting array will be returned.
*/
class LinkPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // link:target:text
            if (args.length > 2) {
                return new LinkPipe().transform(content, args[1], args[2]);
            }
            else if (args.length > 1) {
                return new LinkPipe().transform(content, "", args[1]);
            }
            else {
                return new LinkPipe().transform(content, "", "");
            }
        };
        return x;
    }
    stringToLink(source, target, title) {
        if (!title || !title.length) {
            const q = source.indexOf("?");
            const t = q < 0 ? source : source.substring(0, q);
            const d = t.lastIndexOf("/");
            title = d < 0 ? t : t.substring(d + 1);
        }
        return "<a href='" + source + "' target='" + target + "'>" + title + "</a>";
    }
    arrayToImagLink(sources, target, title) {
        const result = [];
        sources.map((source) => {
            result.push(this.stringToLink(source, target, ""));
        });
        return result;
    }
    transform(source, ...args) {
        const target = (args && args.length) ? args[0] : "";
        const title = (args && args.length > 1) ? args[1] : "";
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.stringToLink(source, target, title);
        }
        return this.arrayToImagLink(source, target, title);
    }
}
LinkPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
LinkPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: LinkPipe, name: "link" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'link' }]
        }] });

class LinkIntoPipeModule {
    static forRoot() {
        return {
            ngModule: LinkIntoPipeModule,
            providers: [LinkPipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('link', LinkComponent);
        pool.registerPipeTransformation('link', LinkPipe.transformationMethod());
    }
}
LinkIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
LinkIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: LinkIntoPipeModule, declarations: [LinkComponent, LinkPipe], imports: [CommonModule], exports: [LinkComponent, LinkPipe] });
LinkIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: LinkIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [LinkComponent, LinkPipe],
                    exports: [LinkComponent, LinkPipe],
                    entryComponents: [LinkComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class PhoneComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.isLink = args.length ? args[0] === 'true' : false;
        this.formatting = args.length > 1 ? args[1] === 'true' : false;
    }
    normalizeSource() {
        let result = this.source.replace(/[\ \-\.\(\)\+]/g, '');
        result = result[0] === '1' ? result.substring(1) : result;
        if (result.length === 10) {
            result = '+1 ' + result + ';ext=' + result;
        }
        else if (result.length > 10) {
            const b = result.slice(0, 10);
            const e = result.slice(10);
            result = '+1' + b + ';ext=' + e;
        }
        return result;
    }
    formattedSource() {
        let result = this.source;
        if (this.formatting) {
            result = this.source.replace(/[\ \-\.\(\)\+]/g, '');
            result = result[0] === '1' ? result.substring(1) : result;
            if (result.length === 10) {
                result = '+1 ' + result.replace(/(\d{3})(\d{3})(\d{4})/, "($1)$2-$3");
            }
            else if (result.length > 10) {
                const b = result.slice(0, 10);
                const e = result.slice(10);
                result = '+1 ' + b.replace(/(\d{3})(\d{3})(\d{4})/, "($1)$2-$3");
                result += (' ext. ' + e);
            }
        }
        return result;
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: 'click',
            item: event.type
        });
    }
}
PhoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhoneComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PhoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: PhoneComponent, selector: "phone", ngImport: i0, template: `
    <a  *ngIf="isLink" [href]="'tel:' + normalizeSource()" (keyup)='keyup($event)' (click)="change($event)">
        <span class='fa fa-phone' aria-hidden='true'></span>
        <span [textContent]="formattedSource()"></span>
    </a>
    <span *ngIf="!isLink">
        <span class='fa fa-phone' aria-hidden='true'></span>
        <span [textContent]="formattedSource()"></span>
    </span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host a:hover .fa-phone{color:#fabdab}:host .fa{margin:0 5px}@media print{:host a{text-decoration:none}:host .fa-phone{display:none}:host a .fa-phone{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhoneComponent, decorators: [{
            type: Component,
            args: [{ selector: 'phone', template: `
    <a  *ngIf="isLink" [href]="'tel:' + normalizeSource()" (keyup)='keyup($event)' (click)="change($event)">
        <span class='fa fa-phone' aria-hidden='true'></span>
        <span [textContent]="formattedSource()"></span>
    </a>
    <span *ngIf="!isLink">
        <span class='fa fa-phone' aria-hidden='true'></span>
        <span [textContent]="formattedSource()"></span>
    </span>
    `, styles: [":host{display:table;float:left;min-height:23px}:host a:hover .fa-phone{color:#fabdab}:host .fa{margin:0 5px}@media print{:host a{text-decoration:none}:host .fa-phone{display:none}:host a .fa-phone{display:none}}\n"] }]
        }] });

/*
* Defines a filter to convert url into an email display.
*/
class PhonePipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // prepend:something
            return new PhonePipe().transform(content, args.length > 1 ? args[1] === 'true' : false, args.length > 2 ? args[2] === 'true' : false);
        };
        return x;
    }
    phoneFromString(source, link, format) {
        return link ?
            "<a href='tel:" + this.normalizeSource(source) + "'><span class='fa fa-phone' aria-hidden='true'></span><span>" + (format ? this.formattedSource(source) : source) + "</span></a>" :
            "<span><span class='fa fa-phone' style='margin: 0 5px' aria-hidden='true'></span><span>" + (format ? this.formattedSource(source) : source) + "</span></span>";
    }
    transform(source, ...args) {
        const link = ((args && args.length) ? args[0] : false);
        const format = ((args && args.length > 1) ? args[1] : false);
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.phoneFromString(source, link, format);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.phoneFromString(item, link, format));
            });
            return result;
        }
    }
    normalizeSource(source) {
        let result = source.replace(/[\ \-\.\(\)\+]/g, '');
        result = result[0] === '1' ? result.substring(1) : result;
        if (result.length === 10) {
            result = '+1 ' + result + ';ext=' + result;
        }
        else if (result.length > 10) {
            const b = result.slice(0, 10);
            const e = result.slice(10);
            result = '+1' + b + ';ext=' + e;
        }
        return result;
    }
    formattedSource(source) {
        let result = source.replace(/[\ \-\.\(\)\+]/g, '');
        result = result[0] === '1' ? result.substring(1) : result;
        if (result.length === 10) {
            result = '+1 ' + result.replace(/(\d{3})(\d{3})(\d{4})/, "($1)$2-$3");
        }
        else if (result.length > 10) {
            const b = result.slice(0, 10);
            const e = result.slice(10);
            result = '+1 ' + b.replace(/(\d{3})(\d{3})(\d{4})/, "($1)$2-$3");
            result += (' ext. ' + e);
        }
        return result;
    }
}
PhonePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhonePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
PhonePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: PhonePipe, name: "phone" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhonePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'phone' }]
        }] });

class PhoneIntoPipeModule {
    static forRoot() {
        return {
            ngModule: PhoneIntoPipeModule,
            providers: [PhonePipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('phone', PhoneComponent);
        pool.registerPipeTransformation('phone', PhonePipe.transformationMethod());
    }
}
PhoneIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhoneIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
PhoneIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: PhoneIntoPipeModule, declarations: [PhoneComponent, PhonePipe], imports: [CommonModule], exports: [PhoneComponent, PhonePipe] });
PhoneIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhoneIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: PhoneIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PhoneComponent, PhonePipe],
                    exports: [PhoneComponent, PhonePipe],
                    entryComponents: [PhoneComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class RatingComponent {
    constructor(el) {
        this.el = el;
        this.singleStar = false;
        this.value = [];
        this.onIntoComponentChange = new EventEmitter();
        el.nativeElement.setAttribute('tabindex', '0');
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    click() {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: 'click',
            item: 'rating'
        });
    }
    transform(source, data, args) {
        this.float = parseFloat(source);
        this.singleStar = args.length ? (args[0] === 'true') : false;
        this.source = source;
        const size = parseInt(source, 10);
        for (let i = 0; i < size; i++) {
            this.value.push(i);
        }
    }
}
RatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
RatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: RatingComponent, selector: "rating-component", host: { listeners: { "keyup": "keyup($event)", "click": "click()" } }, ngImport: i0, template: `
    <span class='rating' *ngIf="singleStar">
        <span class='fa fa-star' aria-hidden='true'></span>
    </span>
    <span class='rating' *ngIf="!singleStar">
        <span class='fa fa-star' aria-hidden='true' *ngFor="let x of value"></span>
        <span class='fa fa-star-half' aria-hidden='true' *ngIf="float != value"></span>
    </span>
    <span class='rate-value' [textContent]="source"></span>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px;cursor:pointer}.rating{display:inline-block}@media print{:host .rating{display:none}}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rating-component', template: `
    <span class='rating' *ngIf="singleStar">
        <span class='fa fa-star' aria-hidden='true'></span>
    </span>
    <span class='rating' *ngIf="!singleStar">
        <span class='fa fa-star' aria-hidden='true' *ngFor="let x of value"></span>
        <span class='fa fa-star-half' aria-hidden='true' *ngIf="float != value"></span>
    </span>
    <span class='rate-value' [textContent]="source"></span>
    `, styles: [":host{display:table;float:left;min-height:23px;cursor:pointer}.rating{display:inline-block}@media print{:host .rating{display:none}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { keyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], click: [{
                type: HostListener,
                args: ['click', []]
            }] } });

/*
* Defines a filter to convert url into a raiting display.
*/
class RatingPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            return new RatingPipe().transform(content, "");
        };
        return x;
    }
    rateString(source, multiStart) {
        const value = parseInt(source, 10);
        const float = parseFloat(source);
        let x = "<span class='rating'>";
        if (multiStart) {
            for (let i = 0; i < value; i++) {
                x += "<span class='fa fa-star' aria-hidden='true'></span>";
            }
            if (float !== value) {
                x += "<span class='fa fa-star-half' aria-hidden='true'></span>";
            }
        }
        else {
            x += "<span class='fa fa-star' aria-hidden='true'></span>";
        }
        x += "</span><span class='rate-value'>" + source + "</span>";
        return x;
    }
    transform(source, ...args) {
        const singleStar = args.length ? (args[0] === 'true') : false;
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.rateString(source, singleStar);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.rateString(item, singleStar));
            });
            return result;
        }
    }
}
RatingPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
RatingPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: RatingPipe, name: "raiting" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'raiting' }]
        }] });

class RatingIntoPipeModule {
    static forRoot() {
        return {
            ngModule: RatingIntoPipeModule,
            providers: [RatingPipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('rating', RatingComponent);
        pool.registerPipeTransformation('rating', RatingPipe.transformationMethod());
    }
}
RatingIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
RatingIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: RatingIntoPipeModule, declarations: [RatingComponent, RatingPipe], imports: [CommonModule], exports: [RatingComponent, RatingPipe] });
RatingIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: RatingIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [RatingComponent, RatingPipe],
                    exports: [RatingComponent, RatingPipe],
                    entryComponents: [RatingComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class NoticeComponent {
    constructor(el) {
        this.el = el;
        this.onIntoComponentChange = new EventEmitter();
        el.nativeElement.setAttribute('tabindex', '0');
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    click() {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: 'click',
            item: 'notice'
        });
    }
    transform(source, data, args) {
        this.message = args.length ? args[0] : undefined;
        this.source = source;
        this.el.nativeElement.setAttribute('title', this.message);
    }
}
NoticeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticeComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NoticeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: NoticeComponent, selector: "notice-component", host: { listeners: { "keyup": "keyup($event)", "click": "click()" } }, ngImport: i0, template: `
        <span class='fa fa-bell' aria-hidden='true'></span>
        <span class='notice' [textContent]="source"></span>
    `, isInline: true, styles: [":host{display:table;position:relative;float:left;cursor:pointer}:host .fa{font-size:1rem}:host:hover{color:red}:host:hover .fa{color:red}:host:hover .notice{background-color:#000}.notice{display:table;width:17px;height:15px;border-radius:50%;text-align:center;background-color:#379bffe6;float:right;font-size:.7rem;line-height:1rem;margin-left:-5px;z-index:2;color:#fff}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'notice-component', template: `
        <span class='fa fa-bell' aria-hidden='true'></span>
        <span class='notice' [textContent]="source"></span>
    `, styles: [":host{display:table;position:relative;float:left;cursor:pointer}:host .fa{font-size:1rem}:host:hover{color:red}:host:hover .fa{color:red}:host:hover .notice{background-color:#000}.notice{display:table;width:17px;height:15px;border-radius:50%;text-align:center;background-color:#379bffe6;float:right;font-size:.7rem;line-height:1rem;margin-left:-5px;z-index:2;color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { keyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], click: [{
                type: HostListener,
                args: ['click', []]
            }] } });

/*
* Defines a filter to convert url into a raiting display.
*/
class NoticePipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            return new NoticePipe().transform(content, "");
        };
        return x;
    }
    noticeString(source, message) {
        return `
        <span style='display:table;possition:relative;float:left' alt='` + message + `'>
          <span class='fa fa-star' aria-hidden='true'></span>
          <span style='display: table;width: 17px;height: 15px;border-radius: 50%;text-align: center;background-color: rgba(200,200,200,0.2);float: right;font-size: 0.8rem;margin-left: -5px'>` +
            source +
            ` </span>
        </span>`;
    }
    transform(source, ...args) {
        const message = args.length ? args[0] : undefined;
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.noticeString(source, message);
        }
        else {
            const result = [];
            source.map((item) => {
                result.push(this.noticeString(item, message));
            });
            return result;
        }
    }
}
NoticePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
NoticePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: NoticePipe, name: "notice" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'notice' }]
        }] });

class NoticeIntoPipeModule {
    static forRoot() {
        return {
            ngModule: NoticeIntoPipeModule,
            providers: [NoticePipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('notice', NoticeComponent);
        pool.registerPipeTransformation('notice', NoticePipe.transformationMethod());
    }
}
NoticeIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticeIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
NoticeIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: NoticeIntoPipeModule, declarations: [NoticeComponent, NoticePipe], imports: [CommonModule], exports: [NoticeComponent, NoticePipe] });
NoticeIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticeIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: NoticeIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NoticeComponent, NoticePipe],
                    exports: [NoticeComponent, NoticePipe],
                    entryComponents: [NoticeComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class SelectComponent {
    constructor() {
        this.multiselect = false;
        this.onIntoComponentChange = new EventEmitter();
    }
    click(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    change(event) {
        event.stopPropagation();
        event.preventDefault();
        this.source = event.target.value;
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: 'change',
            item: this.data
        });
    }
    transform(source, data, args) {
        this.source = source;
        this.data = data;
        this.options = this.service.getDataFor(this.name, this.id, data);
        this.multiselect = args.length ? args[0] === true : false;
    }
}
SelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: SelectComponent, selector: "select-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, ngImport: i0, template: `
    <select tabindex="0" 
      [multiple]="multiselect ? true:null" 
      (click)="click($event)" 
      (change)="change($event)">
        <option *ngFor="let x of options" 
          [attr.selected]="source === x ? 'selected' : null"  
          [value]="x" 
          [textContent]="x"></option>
    </select>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}@media print{:host select{border:0}:host select::-ms-expand{display:none}:host select{appearance:none;text-indent:.01px;text-indent:1px;text-overflow:\"\"}}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'select-component', template: `
    <select tabindex="0" 
      [multiple]="multiselect ? true:null" 
      (click)="click($event)" 
      (change)="change($event)">
        <option *ngFor="let x of options" 
          [attr.selected]="source === x ? 'selected' : null"  
          [value]="x" 
          [textContent]="x"></option>
    </select>
    `, styles: [":host{display:table;float:left;min-height:23px}@media print{:host select{border:0}:host select::-ms-expand{display:none}:host select{appearance:none;text-indent:.01px;text-indent:1px;text-overflow:\"\"}}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class SelectIntoPipeModule {
    static forRoot() {
        return {
            ngModule: SelectIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('select', SelectComponent);
    }
}
SelectIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SelectIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
SelectIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: SelectIntoPipeModule, declarations: [SelectComponent], imports: [CommonModule], exports: [SelectComponent] });
SelectIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SelectIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SelectIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [SelectComponent],
                    exports: [SelectComponent],
                    entryComponents: [SelectComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class ShareComponent {
    constructor() {
        this.shouldDisplay = false;
        this.shareList = []; // list of sites to show on share view.
        this.onIntoComponentChange = new EventEmitter();
    }
    shareInfo(type, address) {
        return {
            icon: 'fa fa-' + type,
            href: address,
            title: 'share with ' + type
        };
    }
    keyup(event) {
        const code = event.which;
        event.stopPropagation();
        event.preventDefault();
        if (code === 13) {
            event.target.click();
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            item: event.title
        });
    }
    toggleShare() {
        this.shouldDisplay = !this.shouldDisplay;
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: 'Share options',
            type: 'share',
            item: this.shouldDisplay ? 'open' : 'close'
        });
    }
    transform(source, data, args) {
        this.source = source;
        const list = (args[0] instanceof Array) ? args[0] : args;
        list.map((arg) => {
            if (arg === 'facebook') {
                this.shareList.push(this.shareInfo('facebook', 'http://www.facebook.com/sharer.php?u=' + source));
            }
            else if (arg === 'twitter') {
                this.shareList.push(this.shareInfo('twitter', 'https://twitter.com/share?title=&amp;url=' + source));
            }
            else if (arg === 'linkedin') {
                this.shareList.push(this.shareInfo('linkedin', 'http://www.linkedin.com/shareArticle?title=&amp;url=' + source));
            }
            else if (arg === 'google') {
                this.shareList.push(this.shareInfo('google-plus', 'https://plus.google.com/share?url=' + source));
            }
            else if (arg === 'pinterest') {
                this.shareList.push(this.shareInfo('google-plus', 'http://pinterest.com/pin/create/link/?url=' + source));
            }
            else if (arg === 'digg') {
                this.shareList.push(this.shareInfo('digg', 'http://digg.com/submit?url=' + source));
            }
            else if (arg === 'get-pocket') {
                this.shareList.push(this.shareInfo('get-pocket', 'https://getpocket.com/edit?url=' + source));
            }
            else if (arg === 'xing') {
                this.shareList.push(this.shareInfo('xing', 'https://www.xing.com/app/user?op=share&url=' + source));
            }
            else if (arg === 'stumbleupon') {
                this.shareList.push(this.shareInfo('stumbleupon', 'http://www.stumbleupon.com/submit?url=' + source));
            }
        });
    }
}
ShareComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ShareComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ShareComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: ShareComponent, selector: "share-component", ngImport: i0, template: `
    <a id='share-comment-{{id}}' 
        tabindex="0" 
        class='share-item-tips' 
        (keyup)='keyup($event)'
        (click)='toggleShare()'>
    <span class="fa fa-share-alt"></span>
    <span class="share">share</span>
    </a>
    <span id='share-comment-{{id}}-tips' class='tips' *ngIf='shouldDisplay'>
      <span class='social-referal'>
        <a *ngFor="let share of shareList" 
            (keyup)='keyup($event)'
            (click)='change(share)'
            [class]='share.icon' target='_blank' 
            [href]='share.href'><span class='off-screen' [textContent]="share.title"></span></a>
      </span>
    </span>
`, isInline: true, styles: [":host{display:table;float:left;min-height:23px;position:relative}.share-item-tips{cursor:pointer}.share-item-tips:hover{color:#fabdab}.share-item-tips .fa{margin:0}.share-item-tips:hover .fa{color:#fabdab}.share-item-tips .share{margin-left:5px}.tips{position:absolute;display:flex;flex-direction:row;padding:5px;border:1px solid #aaa;border-radius:2px;background-color:#fff;z-index:2}.tips .social-referal{display:flex;flex-direction:row}.tips .social-referal .fa{float:left;padding:2px 4px;color:#00f;border:1px solid #ccc;border-radius:4px;text-decoration:none;margin:0 1px;width:20px;text-align:center}.tips .social-referal .fa:hover{color:#fff;background-color:#00f}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ShareComponent, decorators: [{
            type: Component,
            args: [{ selector: 'share-component', template: `
    <a id='share-comment-{{id}}' 
        tabindex="0" 
        class='share-item-tips' 
        (keyup)='keyup($event)'
        (click)='toggleShare()'>
    <span class="fa fa-share-alt"></span>
    <span class="share">share</span>
    </a>
    <span id='share-comment-{{id}}-tips' class='tips' *ngIf='shouldDisplay'>
      <span class='social-referal'>
        <a *ngFor="let share of shareList" 
            (keyup)='keyup($event)'
            (click)='change(share)'
            [class]='share.icon' target='_blank' 
            [href]='share.href'><span class='off-screen' [textContent]="share.title"></span></a>
      </span>
    </span>
`, styles: [":host{display:table;float:left;min-height:23px;position:relative}.share-item-tips{cursor:pointer}.share-item-tips:hover{color:#fabdab}.share-item-tips .fa{margin:0}.share-item-tips:hover .fa{color:#fabdab}.share-item-tips .share{margin-left:5px}.tips{position:absolute;display:flex;flex-direction:row;padding:5px;border:1px solid #aaa;border-radius:2px;background-color:#fff;z-index:2}.tips .social-referal{display:flex;flex-direction:row}.tips .social-referal .fa{float:left;padding:2px 4px;color:#00f;border:1px solid #ccc;border-radius:4px;text-decoration:none;margin:0 1px;width:20px;text-align:center}.tips .social-referal .fa:hover{color:#fff;background-color:#00f}\n"] }]
        }] });

class ShareIntoPipeModule {
    static forRoot() {
        return {
            ngModule: ShareIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('share', ShareComponent);
    }
}
ShareIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ShareIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
ShareIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: ShareIntoPipeModule, declarations: [ShareComponent], imports: [CommonModule], exports: [ShareComponent] });
ShareIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ShareIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ShareIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [ShareComponent],
                    exports: [ShareComponent],
                    entryComponents: [ShareComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class SpanComponent {
    transform(source, data, args) {
        this.source = source;
    }
}
SpanComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SpanComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SpanComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: SpanComponent, selector: "span-component", ngImport: i0, template: `<span [textContent]="source"></span>`, isInline: true, styles: [":host{display:table;float:left;min-height:23px}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SpanComponent, decorators: [{
            type: Component,
            args: [{ selector: 'span-component', template: `<span [textContent]="source"></span>`, styles: [":host{display:table;float:left;min-height:23px}\n"] }]
        }] });

class SpanIntoPipeModule {
    static forRoot() {
        return {
            ngModule: SpanIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('span', SpanComponent);
    }
}
SpanIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SpanIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
SpanIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: SpanIntoPipeModule, declarations: [SpanComponent], imports: [CommonModule], exports: [SpanComponent] });
SpanIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SpanIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SpanIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [SpanComponent],
                    exports: [SpanComponent],
                    entryComponents: [SpanComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class SwitchComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        const code = event.which;
        if (code === 13) {
            event.target.click();
        }
    }
    click(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.source === this.ideal) {
            this.source = this.original;
        }
        else {
            this.source = this.ideal;
        }
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "switch",
            item: this.data
        });
        setTimeout(() => {
            if (this.check) {
                this.check.nativeElement.focus();
            }
            if (this.uncheck) {
                this.uncheck.nativeElement.focus();
            }
        }, 66);
    }
    transform(source, data, args) {
        this.ideal = args.length ? String(args[0]) : "";
        this.onText = args.length > 1 ? args[1] : 'ON';
        this.offText = args.length > 2 ? args[2] : 'OFF';
        this.source = String(source);
        this.data = data;
        this.original = this.source === this.ideal ? "" : source;
    }
}
SwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: SwitchComponent, selector: "switch-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, viewQueries: [{ propertyName: "check", first: true, predicate: ["check"], descendants: true }, { propertyName: "uncheck", first: true, predicate: ["uncheck"], descendants: true }], ngImport: i0, template: `
      <span *ngIf="source === ideal" 
          #check tabindex="0" 
          class="switch fa fa-toggle-on" 
          aria-checked="true"
          role="checkbox"
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span *ngIf="source !== ideal"
          #uncheck tabindex="0" 
          class="switch fa fa-toggle-off" 
          aria-checked="false"
          role="checkbox"
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span class="text" [class.selected]="source === ideal" 
        [textContent]="source === ideal ? onText : offText"></span>

    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}:host .switch{font-size:1.4rem;cursor:pointer;float:left}:host .switch:hover{color:#fabdab}:host .switch.fa-toggle-on{color:green}:host .switch.fa-toggle-off{color:red}:host .text{font-size:1.2rem;text-transform:uppercase;float:left;margin-left:5px;color:red}:host .text.selected{color:green}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'switch-component', template: `
      <span *ngIf="source === ideal" 
          #check tabindex="0" 
          class="switch fa fa-toggle-on" 
          aria-checked="true"
          role="checkbox"
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span *ngIf="source !== ideal"
          #uncheck tabindex="0" 
          class="switch fa fa-toggle-off" 
          aria-checked="false"
          role="checkbox"
          (keyup)="keyup($event)" 
          (click)="click($event)"></span>
      <span class="text" [class.selected]="source === ideal" 
        [textContent]="source === ideal ? onText : offText"></span>

    `, styles: [":host{display:table;float:left;min-height:23px}:host .switch{font-size:1.4rem;cursor:pointer;float:left}:host .switch:hover{color:#fabdab}:host .switch.fa-toggle-on{color:green}:host .switch.fa-toggle-off{color:red}:host .text{font-size:1.2rem;text-transform:uppercase;float:left;margin-left:5px;color:red}:host .text.selected{color:green}\n"] }]
        }], propDecorators: { check: [{
                type: ViewChild,
                args: ["check"]
            }], uncheck: [{
                type: ViewChild,
                args: ["uncheck"]
            }], onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class SwitchIntoPipeModule {
    static forRoot() {
        return {
            ngModule: SwitchIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('switch', SwitchComponent);
    }
}
SwitchIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SwitchIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
SwitchIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: SwitchIntoPipeModule, declarations: [SwitchComponent], imports: [CommonModule], exports: [SwitchComponent] });
SwitchIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SwitchIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SwitchIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [SwitchComponent],
                    exports: [SwitchComponent],
                    entryComponents: [SwitchComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class SliderComponent {
    constructor() {
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        event.stopPropagation();
        event.preventDefault();
        const code = event.which;
        if (((code >= 48) && (code <= 90)) ||
            ((code >= 96) && (code <= 111)) ||
            ((code == 32) || (code == 8)) ||
            ((code >= 186) && (code <= 222))) {
            this.source = event.target.value;
        }
    }
    oninput(event) {
        this.source = event.target.value;
    }
    onchange(event) {
        this.source = event.target.value;
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: "slider",
            item: this.data
        });
    }
    transform(source, data, args) {
        this.source = source;
        this.data = data;
        this.length = args.length ? parseFloat(args[0]) : 200;
        this.vertical = args.length > 1 ? String(args[1]) === 'true' : false;
        this.showRange = args.length > 2 ? String(args[2]) === 'true' : false;
        this.min = args.length > 3 ? args[3] : 0;
        this.max = args.length > 4 ? args[4] : 100;
    }
}
SliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SliderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: SliderComponent, selector: "slider-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, ngImport: i0, template: `
    <span 
      class="slidecontainer" 
      [style.width]="!vertical ? length + 'px' : null"
      [style.height]="vertical ? length + 'px' : null"
      [class.vertical]="vertical">
      <span class="range" *ngIf="showRange">
      <span class="min" [textContent]="min"></span>
      <span class="value" [textContent]="source"></span>
      <span class="max" [textContent]="max"></span>
      </span>
      <input 
        type="range"
        class="slider" 
        (input)="oninput($event)"
        (change)="onchange($event)"
        [attr.value]="source" 
        [attr.min]="min" 
        [attr.max]="max" 
        [attr.id]="id" />
    </span>
    `, isInline: true, styles: [":host .slidecontainer{display:table}:host .slidecontainer .range{position:relative;display:table;height:12px;font-size:.8rem;width:100%}:host .slidecontainer .range .min{position:absolute;left:0;top:0}:host .slidecontainer .range .value{position:absolute;left:50%;top:0}:host .slidecontainer .range .max{position:absolute;right:0;top:0}:host .slidecontainer .slider{-webkit-appearance:none;background:#d3d3d3;outline:none;opacity:.7;transition:opacity .2s;border:2px inset #aaa;border-radius:33%;width:100%;height:1px}:host .slidecontainer.vertical .slider{transform:rotate(270deg);margin:50% -50%}:host .slidecontainer.vertical .range{width:33px;height:85%;float:left}:host .slidecontainer.vertical .range .min{top:inherit;right:5px;bottom:0}:host .slidecontainer.vertical .range .value{left:inherit;right:5px;top:50%}:host .slidecontainer.vertical .range .max{right:5px;top:0}:host .slider:hover{opacity:1}:host .slider::-webkit-slider-thumb{appearance:none;background:#444;background-image:linear-gradient(#444,#ddd,#444);cursor:pointer;border-radius:5px;border:2px solid #000;width:22px;height:12px}:host .slider::-moz-range-thumb{background:#444;background-image:linear-gradient(#444,#ddd,#444);border-radius:5px;border:2px solid #000;cursor:pointer;width:22px;height:10px}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SliderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'slider-component', template: `
    <span 
      class="slidecontainer" 
      [style.width]="!vertical ? length + 'px' : null"
      [style.height]="vertical ? length + 'px' : null"
      [class.vertical]="vertical">
      <span class="range" *ngIf="showRange">
      <span class="min" [textContent]="min"></span>
      <span class="value" [textContent]="source"></span>
      <span class="max" [textContent]="max"></span>
      </span>
      <input 
        type="range"
        class="slider" 
        (input)="oninput($event)"
        (change)="onchange($event)"
        [attr.value]="source" 
        [attr.min]="min" 
        [attr.max]="max" 
        [attr.id]="id" />
    </span>
    `, styles: [":host .slidecontainer{display:table}:host .slidecontainer .range{position:relative;display:table;height:12px;font-size:.8rem;width:100%}:host .slidecontainer .range .min{position:absolute;left:0;top:0}:host .slidecontainer .range .value{position:absolute;left:50%;top:0}:host .slidecontainer .range .max{position:absolute;right:0;top:0}:host .slidecontainer .slider{-webkit-appearance:none;background:#d3d3d3;outline:none;opacity:.7;transition:opacity .2s;border:2px inset #aaa;border-radius:33%;width:100%;height:1px}:host .slidecontainer.vertical .slider{transform:rotate(270deg);margin:50% -50%}:host .slidecontainer.vertical .range{width:33px;height:85%;float:left}:host .slidecontainer.vertical .range .min{top:inherit;right:5px;bottom:0}:host .slidecontainer.vertical .range .value{left:inherit;right:5px;top:50%}:host .slidecontainer.vertical .range .max{right:5px;top:0}:host .slider:hover{opacity:1}:host .slider::-webkit-slider-thumb{appearance:none;background:#444;background-image:linear-gradient(#444,#ddd,#444);cursor:pointer;border-radius:5px;border:2px solid #000;width:22px;height:12px}:host .slider::-moz-range-thumb{background:#444;background-image:linear-gradient(#444,#ddd,#444);border-radius:5px;border:2px solid #000;cursor:pointer;width:22px;height:10px}\n"] }]
        }], propDecorators: { onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class SliderIntoPipeModule {
    static forRoot() {
        return {
            ngModule: SliderIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('slider', SliderComponent);
    }
}
SliderIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SliderIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
SliderIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: SliderIntoPipeModule, declarations: [SliderComponent], imports: [CommonModule, CommonPipesModule], exports: [SliderComponent] });
SliderIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SliderIntoPipeModule, imports: [CommonModule, CommonPipesModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: SliderIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CommonPipesModule.forRoot()],
                    declarations: [SliderComponent],
                    exports: [SliderComponent],
                    entryComponents: [SliderComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class TableComponent {
    constructor() {
        this.headers = [];
        this.rows = [];
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.id = args.length ? args[0] : '';
        this.name = args.length > 1 ? args[1] : undefined;
        if (typeof source === 'object') {
            this.rows.push(source);
            this.getHeaders(source);
        }
        else if (source instanceof Array) {
            if (typeof source[0] === 'object') {
                this.rows = source;
                this.getHeaders(source[0]);
            }
            else {
                source.map((item) => {
                    this.rows.push({ value: item });
                });
                this.headers.push('value');
            }
        }
        else {
            this.rows.push({ value: source });
            this.headers.push('value');
        }
    }
    getHeaders(obj) {
        Object.keys(obj).map((item) => {
            this.headers.push(item);
        });
    }
}
TableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: TableComponent, selector: "table-component", ngImport: i0, template: `
    <table [id]="id" class="piped-table">
        <caption *ngIf="name" [textContent]="name"></caption>
        <tr><th scope="col" *ngFor="let header of headers" [textContent]="header"></th></tr>
        <tr *ngFor="let row of rows"><td *ngFor="let header of headers" [textContent]="row[header]"></td></tr>
    </table>
    `, isInline: true, styles: [":host .piped-table{padding:0;width:100%;border-collapse:collapse}:host .piped-table caption{background-color:#c3e5e2;border-radius:2px;color:#1b1b1b;caption-side:top;font-size:14px;padding:5px 6px;margin-bottom:15px;text-align:left}:host .piped-table th{-webkit-user-select:none;user-select:none;height:24px;position:relative;white-space:nowrap;font-weight:400;text-transform:uppercase;font-size:14px;padding-top:6px;padding-bottom:6px;text-align:left}:host .piped-table td{padding-left:3px;min-height:21px}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'table-component', template: `
    <table [id]="id" class="piped-table">
        <caption *ngIf="name" [textContent]="name"></caption>
        <tr><th scope="col" *ngFor="let header of headers" [textContent]="header"></th></tr>
        <tr *ngFor="let row of rows"><td *ngFor="let header of headers" [textContent]="row[header]"></td></tr>
    </table>
    `, styles: [":host .piped-table{padding:0;width:100%;border-collapse:collapse}:host .piped-table caption{background-color:#c3e5e2;border-radius:2px;color:#1b1b1b;caption-side:top;font-size:14px;padding:5px 6px;margin-bottom:15px;text-align:left}:host .piped-table th{-webkit-user-select:none;user-select:none;height:24px;position:relative;white-space:nowrap;font-weight:400;text-transform:uppercase;font-size:14px;padding-top:6px;padding-bottom:6px;text-align:left}:host .piped-table td{padding-left:3px;min-height:21px}\n"] }]
        }] });

/*
* Defines a filter to convert url into an address display.
*/
class TablePipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            return new TablePipe().transform(content, args.length > 1 ? args[1] : '', args.length > 2 ? args[2] : undefined);
        };
        return x;
    }
    transform(source, ...args) {
        const id = args.length ? args[0] : '';
        const name = args.length > 1 ? args[1] : undefined;
        const headers = [];
        const rows = [];
        this.buildTable(source, rows, headers);
        let result = "<table style='width: 100%' id='" + id + "'>" + (name ? "<caption style='text-align:left;background-color: #c3e5e2;'>" + name + "</caption>" : "") + "<tr>";
        headers.map((header) => {
            result += ("<th style='text-align: left;font-weight:normal;text-transform: uppercase;' scope='col'>" + header + "</th>");
        });
        result += "</tr>";
        rows.map((row) => {
            result += "<tr>";
            headers.map((header) => {
                result += ("<td>" + row[header] + "</td>");
            });
            result += "</tr>";
        });
        result += "</table>";
        return result;
    }
    buildTable(source, rows, headers) {
        if (typeof source === 'object') {
            rows.push(source);
            this.getHeaders(source, headers);
        }
        else if (source instanceof Array) {
            if (typeof source[0] === 'object') {
                rows = source;
                this.getHeaders(source[0], headers);
            }
            else {
                source.map((item) => {
                    rows.push({ value: item });
                });
                headers.push('value');
            }
        }
        else {
            rows.push({ value: source });
            headers.push('value');
        }
    }
    getHeaders(obj, headers) {
        Object.keys(obj).map((item) => {
            headers.push(item);
        });
    }
}
TablePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TablePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TablePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: TablePipe, name: "table" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TablePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'table' }]
        }] });

class TableIntoPipeModule {
    static forRoot() {
        return {
            ngModule: TableIntoPipeModule,
            providers: [
                TablePipe
            ]
        };
    }
    constructor(pool) {
        pool.registerComponent('table', TableComponent);
        pool.registerPipeTransformation('table', TablePipe.transformationMethod());
    }
}
TableIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TableIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
TableIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: TableIntoPipeModule, declarations: [TableComponent, TablePipe], imports: [CommonModule], exports: [TableComponent, TablePipe] });
TableIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TableIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TableIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [TableComponent, TablePipe],
                    exports: [TableComponent, TablePipe],
                    entryComponents: [TableComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class TextComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.rows = 4;
        this.limit = 0;
        this.editName = false;
        this.counter = false;
        this.onIntoComponentChange = new EventEmitter();
    }
    keyup(event) {
        const code = event.which;
        if ((code === 48) || (code === 8)) {
            this.source = event.target.value;
        }
        else if (((code > 48) && (code <= 90)) ||
            ((code >= 96) && (code <= 111)) || (code == 32) ||
            ((code >= 186) && (code <= 222))) {
            if (!this.limit || this.source.length < this.limit) {
                this.source = event.target.value;
            }
        }
        else if ((code === 13) || (code === 9) || (code === 27)) {
            this.editName = false;
            if (this.oldValue !== String(this.source)) {
                this.onIntoComponentChange.emit({
                    id: this.id,
                    name: this.name,
                    value: this.source,
                    type: 'change',
                    item: this.oldValue
                });
                this.oldValue = String(this.source);
            }
            if (code === 13) {
                setTimeout(() => {
                    if (this.nameHolder) {
                        this.renderer.selectRootElement(this.nameHolder.nativeElement).focus();
                    }
                }, 99);
            }
        }
    }
    blur(event) {
        event.stopPropagation();
        event.preventDefault();
        this.editName = false;
        if (this.oldValue !== String(this.source)) {
            this.onIntoComponentChange.emit({
                id: this.id,
                name: this.name,
                value: this.source,
                type: 'blur',
                item: this.oldValue
            });
            this.oldValue = String(this.source);
        }
    }
    focus(event) {
        this.click(event);
    }
    click(event) {
        event.stopPropagation();
        event.preventDefault();
        this.editName = true;
        setTimeout(() => {
            if (this.nameEditor) {
                this.renderer.selectRootElement(this.nameEditor.nativeElement).focus();
            }
        }, 99);
    }
    transform(source, data, args) {
        this.source = source;
        this.oldValue = source;
        this.rows = args.length ? args[0] : 4;
        this.limit = args.length > 1 ? args[1] : 0;
        this.counter = args.length > 2 ? args[2] : false;
    }
}
TextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TextComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
TextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: TextComponent, selector: "text-component", outputs: { onIntoComponentChange: "onIntoComponentChange" }, viewQueries: [{ propertyName: "nameEditor", first: true, predicate: ["nameEditor"], descendants: true }, { propertyName: "nameHolder", first: true, predicate: ["nameHolder"], descendants: true }], ngImport: i0, template: `
    <span class="text-wrapper" *ngIf="editName">
      <textarea #nameEditor
        [id]="id"
        [name]="name"
        [value]="source"
        [attr.maxlength]="limit ? limit : null"
        [rows]="rows"
        (blur)="blur($event)" 
        (keyup)='keyup($event)'></textarea>
      <span *ngIf="counter" class="counter" 
        [textContent]="limit ? (limit - source.length) + ' remaining' : source.length + ' typed'"></span>
    </span>
    <span #nameHolder
        *ngIf='!editName'
        class='locked' 
        tabindex='0' 
        (click)='click($event)'
        (keyup)='focus($event)'
        [innerHTML]="source">
    </span>
    `, isInline: true, styles: [".locked{display:block;cursor:pointer;min-height:23px;min-width:33px;-webkit-user-select:none;user-select:none;border:1px solid transparent}.text-wrapper{box-sizing:border-box;display:table;width:100%}.text-wrapper textarea{box-sizing:border-box;display:block;cursor:beam;width:100%}.counter{display:table;float:right;color:#ddd}:host{box-sizing:border-box;width:100%;display:table;float:left;min-height:23px;min-width:33px}:host .locked:hover{border:1px solid #fabdab}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'text-component', template: `
    <span class="text-wrapper" *ngIf="editName">
      <textarea #nameEditor
        [id]="id"
        [name]="name"
        [value]="source"
        [attr.maxlength]="limit ? limit : null"
        [rows]="rows"
        (blur)="blur($event)" 
        (keyup)='keyup($event)'></textarea>
      <span *ngIf="counter" class="counter" 
        [textContent]="limit ? (limit - source.length) + ' remaining' : source.length + ' typed'"></span>
    </span>
    <span #nameHolder
        *ngIf='!editName'
        class='locked' 
        tabindex='0' 
        (click)='click($event)'
        (keyup)='focus($event)'
        [innerHTML]="source">
    </span>
    `, styles: [".locked{display:block;cursor:pointer;min-height:23px;min-width:33px;-webkit-user-select:none;user-select:none;border:1px solid transparent}.text-wrapper{box-sizing:border-box;display:table;width:100%}.text-wrapper textarea{box-sizing:border-box;display:block;cursor:beam;width:100%}.counter{display:table;float:right;color:#ddd}:host{box-sizing:border-box;width:100%;display:table;float:left;min-height:23px;min-width:33px}:host .locked:hover{border:1px solid #fabdab}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { nameEditor: [{
                type: ViewChild,
                args: ["nameEditor"]
            }], nameHolder: [{
                type: ViewChild,
                args: ["nameHolder"]
            }], onIntoComponentChange: [{
                type: Output,
                args: ["onIntoComponentChange"]
            }] } });

class TextIntoPipeModule {
    static forRoot() {
        return {
            ngModule: TextIntoPipeModule,
            providers: []
        };
    }
    constructor(pool) {
        pool.registerComponent('text', TextComponent);
    }
}
TextIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TextIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
TextIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: TextIntoPipeModule, declarations: [TextComponent], imports: [CommonModule, CommonPipesModule], exports: [TextComponent] });
TextIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TextIntoPipeModule, imports: [CommonModule, CommonPipesModule.forRoot()] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: TextIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CommonPipesModule.forRoot()],
                    declarations: [TextComponent],
                    exports: [TextComponent],
                    entryComponents: [TextComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class VideoComponent {
    constructor() {
        this.hasControls = true;
        this.hoverPlay = false;
        this.onIntoComponentChange = new EventEmitter();
    }
    transform(source, data, args) {
        this.source = source;
        this.width = (args && args.length) ? args[0] : "";
        this.height = (args && args.length > 1) ? args[1] : "";
        this.alt = (args && args.length > 2) ? args[2] : "";
        this.hasControls = (args && args.length > 3) ? (args[3] === 'true') : true;
        this.hoverPlay = (args && args.length > 4) ? (args[4] === 'true') : false;
        if ((typeof source === "string") || !(source instanceof Array)) {
            if (!this.alt || !this.alt.length) {
                const q = source.indexOf("?");
                const t = q < 0 ? source : source.substring(0, q);
                const d = t.lastIndexOf("/");
                this.alt = d < 0 ? t : t.substring(d + 1);
            }
        }
    }
    updateControls(event) {
        if (this.hasControls) {
            event.target.setAttribute('controls', 'true');
        }
        if (this.hoverPlay) {
            event.target.play();
        }
    }
    resetControls(event) {
        if (this.hoverPlay && this.isPlaying(event.target)) {
            event.target.pause();
        }
    }
    isPlaying(video) {
        return !!(video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2);
    }
    keyup(event) {
        const code = event.which;
        if (code === 13) {
            if (this.isPlaying(event.target)) {
                event.target.pause();
            }
            else {
                event.target.play();
            }
        }
    }
    change(event) {
        this.onIntoComponentChange.emit({
            id: this.id,
            name: this.name,
            value: this.source,
            type: event.type,
            item: {
                autoplay: event.target.autoplay,
                controls: event.target.controls,
                duration: event.target.duration,
                ended: event.target.ended,
                error: event.target.error,
                paused: event.target.paused,
                muted: event.target.muted,
                currentTime: event.target.currentTime,
                volume: event.target.volume
            }
        });
    }
}
VideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
VideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: VideoComponent, selector: "video-component", ngImport: i0, template: `
    <video tabindex="0"
        (focus)="updateControls($event)"
        (mouseenter)="updateControls($event)"
        (mouseleave)="resetControls($event)"
        (keyup)="keyup($event)"
        (play)="change($event)"
        (ended)="change($event)"
        (pause)="change($event)"
        (seeked)="change($event)"
        (error)="change($event)"
        (fullscreenchange)="change($event)"
        [src]="source" 
        [style.width]="width" 
        [style.height]="height"
        [title]="alt"></video>
    `, isInline: true, styles: [":host{display:table;float:left;min-height:23px}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoComponent, decorators: [{
            type: Component,
            args: [{ selector: 'video-component', template: `
    <video tabindex="0"
        (focus)="updateControls($event)"
        (mouseenter)="updateControls($event)"
        (mouseleave)="resetControls($event)"
        (keyup)="keyup($event)"
        (play)="change($event)"
        (ended)="change($event)"
        (pause)="change($event)"
        (seeked)="change($event)"
        (error)="change($event)"
        (fullscreenchange)="change($event)"
        [src]="source" 
        [style.width]="width" 
        [style.height]="height"
        [title]="alt"></video>
    `, styles: [":host{display:table;float:left;min-height:23px}\n"] }]
        }] });

/*
* Defines a filter to convert url into an image display.
* if transforming object is an array, all elements in the array will be transformed and the resulting array will be returned.
*/
class VideoPipe {
    static transformationMethod() {
        const x = function (content, args, callback, data) {
            // video:200px:auto:alttext OR video:200px:alternate-text OR video:200px OR video
            if (args.length > 3) {
                return new VideoPipe().transform(content, args[1], args[2], args[3]);
            }
            else if (args.length > 2) {
                return new VideoPipe().transform(content, args[1], args[2]);
            }
            else if (args.length > 1) {
                return new VideoPipe().transform(content, args[1]);
            }
            else {
                return new VideoPipe().transform(content, "");
            }
        };
        return x;
    }
    stringToVideo(source, width, height, alt) {
        if (!alt || !alt.length) {
            const q = source.indexOf("?");
            const t = q < 0 ? source : source.substring(0, q);
            const d = t.lastIndexOf("/");
            alt = d < 0 ? t : t.substring(d + 1);
        }
        return "<video src=\'" + source + "\' style=\'" + width + height + "\' title=\'" + alt + "\'  controls=\'true\' />";
    }
    arrayToVideo(sources, width, height, alt) {
        const result = [];
        sources.map((source) => {
            result.push(this.stringToVideo(source, width, height, alt));
        });
        return result;
    }
    transform(source, ...args) {
        const width = (args && args.length) ? "width: " + args[0] + ";" : "";
        const height = (args && args.length > 1) ? "height: " + args[1] + ";" : "";
        const alt = (args && args.length > 2) ? args[2] : "";
        if ((typeof source === "string") || !(source instanceof Array)) {
            return this.stringToVideo(source, width, height, alt);
        }
        return this.arrayToVideo(source, width, height, "");
    }
}
VideoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
VideoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: VideoPipe, name: "video" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'video' }]
        }] });

class VideoIntoPipeModule {
    static forRoot() {
        return {
            ngModule: VideoIntoPipeModule,
            providers: [VideoPipe]
        };
    }
    constructor(pool) {
        pool.registerComponent('video', VideoComponent);
        pool.registerPipeTransformation('video', VideoPipe.transformationMethod());
    }
}
VideoIntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoIntoPipeModule, deps: [{ token: ComponentPool }], target: i0.ɵɵFactoryTarget.NgModule });
VideoIntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: VideoIntoPipeModule, declarations: [VideoComponent, VideoPipe], imports: [CommonModule], exports: [VideoComponent, VideoPipe] });
VideoIntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoIntoPipeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: VideoIntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [VideoComponent, VideoPipe],
                    exports: [VideoComponent, VideoPipe],
                    entryComponents: [VideoComponent],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }], ctorParameters: function () {
        return [{ type: ComponentPool, decorators: [{
                        type: Inject,
                        args: [ComponentPool]
                    }] }];
    } });

class IntoPipeModule {
}
IntoPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: IntoPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IntoPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.10", ngImport: i0, type: IntoPipeModule, imports: [CommonModule, CommonPipesModule, AddressIntoPipeModule, AudioIntoPipeModule, CalendarIntoPipeModule, CheckboxIntoPipeModule, EmailIntoPipeModule, FontIntoPipeModule, ImageIntoPipeModule, InputIntoPipeModule, InputGroupIntoPipeModule, JsonIntoPipeModule, LastUpdateIntoPipeModule, LikeIntoPipeModule, LinkIntoPipeModule, PhoneIntoPipeModule, RatingIntoPipeModule, NoticeIntoPipeModule, SelectIntoPipeModule, ShareIntoPipeModule, SliderIntoPipeModule, SpanIntoPipeModule, SwitchIntoPipeModule, TableIntoPipeModule, TextIntoPipeModule, VideoIntoPipeModule], exports: [CommonPipesModule,
        AddressIntoPipeModule,
        AudioIntoPipeModule,
        CalendarIntoPipeModule,
        CheckboxIntoPipeModule,
        EmailIntoPipeModule,
        FontIntoPipeModule,
        ImageIntoPipeModule,
        InputIntoPipeModule,
        InputGroupIntoPipeModule,
        JsonIntoPipeModule,
        LastUpdateIntoPipeModule,
        LikeIntoPipeModule,
        LinkIntoPipeModule,
        PhoneIntoPipeModule,
        RatingIntoPipeModule,
        NoticeIntoPipeModule,
        SelectIntoPipeModule,
        ShareIntoPipeModule,
        SliderIntoPipeModule,
        SpanIntoPipeModule,
        SwitchIntoPipeModule,
        TableIntoPipeModule,
        TableIntoPipeModule,
        TextIntoPipeModule,
        VideoIntoPipeModule] });
IntoPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: IntoPipeModule, imports: [CommonModule,
        CommonPipesModule.forRoot(),
        AddressIntoPipeModule.forRoot(),
        AudioIntoPipeModule.forRoot(),
        CalendarIntoPipeModule.forRoot(),
        CheckboxIntoPipeModule.forRoot(),
        EmailIntoPipeModule.forRoot(),
        FontIntoPipeModule.forRoot(),
        ImageIntoPipeModule.forRoot(),
        InputIntoPipeModule.forRoot(),
        InputGroupIntoPipeModule.forRoot(),
        JsonIntoPipeModule.forRoot(),
        LastUpdateIntoPipeModule.forRoot(),
        LikeIntoPipeModule.forRoot(),
        LinkIntoPipeModule.forRoot(),
        PhoneIntoPipeModule.forRoot(),
        RatingIntoPipeModule.forRoot(),
        NoticeIntoPipeModule.forRoot(),
        SelectIntoPipeModule.forRoot(),
        ShareIntoPipeModule.forRoot(),
        SliderIntoPipeModule.forRoot(),
        SpanIntoPipeModule.forRoot(),
        SwitchIntoPipeModule.forRoot(),
        TableIntoPipeModule.forRoot(),
        TextIntoPipeModule.forRoot(),
        VideoIntoPipeModule.forRoot(), CommonPipesModule,
        AddressIntoPipeModule,
        AudioIntoPipeModule,
        CalendarIntoPipeModule,
        CheckboxIntoPipeModule,
        EmailIntoPipeModule,
        FontIntoPipeModule,
        ImageIntoPipeModule,
        InputIntoPipeModule,
        InputGroupIntoPipeModule,
        JsonIntoPipeModule,
        LastUpdateIntoPipeModule,
        LikeIntoPipeModule,
        LinkIntoPipeModule,
        PhoneIntoPipeModule,
        RatingIntoPipeModule,
        NoticeIntoPipeModule,
        SelectIntoPipeModule,
        ShareIntoPipeModule,
        SliderIntoPipeModule,
        SpanIntoPipeModule,
        SwitchIntoPipeModule,
        TableIntoPipeModule,
        TableIntoPipeModule,
        TextIntoPipeModule,
        VideoIntoPipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: IntoPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        CommonPipesModule.forRoot(),
                        AddressIntoPipeModule.forRoot(),
                        AudioIntoPipeModule.forRoot(),
                        CalendarIntoPipeModule.forRoot(),
                        CheckboxIntoPipeModule.forRoot(),
                        EmailIntoPipeModule.forRoot(),
                        FontIntoPipeModule.forRoot(),
                        ImageIntoPipeModule.forRoot(),
                        InputIntoPipeModule.forRoot(),
                        InputGroupIntoPipeModule.forRoot(),
                        JsonIntoPipeModule.forRoot(),
                        LastUpdateIntoPipeModule.forRoot(),
                        LikeIntoPipeModule.forRoot(),
                        LinkIntoPipeModule.forRoot(),
                        PhoneIntoPipeModule.forRoot(),
                        RatingIntoPipeModule.forRoot(),
                        NoticeIntoPipeModule.forRoot(),
                        SelectIntoPipeModule.forRoot(),
                        ShareIntoPipeModule.forRoot(),
                        SliderIntoPipeModule.forRoot(),
                        SpanIntoPipeModule.forRoot(),
                        SwitchIntoPipeModule.forRoot(),
                        TableIntoPipeModule.forRoot(),
                        TextIntoPipeModule.forRoot(),
                        VideoIntoPipeModule.forRoot()
                    ],
                    declarations: [],
                    exports: [
                        CommonPipesModule,
                        AddressIntoPipeModule,
                        AudioIntoPipeModule,
                        CalendarIntoPipeModule,
                        CheckboxIntoPipeModule,
                        EmailIntoPipeModule,
                        FontIntoPipeModule,
                        ImageIntoPipeModule,
                        InputIntoPipeModule,
                        InputGroupIntoPipeModule,
                        JsonIntoPipeModule,
                        LastUpdateIntoPipeModule,
                        LikeIntoPipeModule,
                        LinkIntoPipeModule,
                        PhoneIntoPipeModule,
                        RatingIntoPipeModule,
                        NoticeIntoPipeModule,
                        SelectIntoPipeModule,
                        ShareIntoPipeModule,
                        SliderIntoPipeModule,
                        SpanIntoPipeModule,
                        SwitchIntoPipeModule,
                        TableIntoPipeModule,
                        TableIntoPipeModule,
                        TextIntoPipeModule,
                        VideoIntoPipeModule
                    ],
                    entryComponents: [],
                    providers: [],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }] });

/*
 * Public API Surface of into-pipes
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AddressComponent, AddressIntoPipeModule, AddressPipe, AppendPipe, AudioComponent, AudioIntoPipeModule, AudioPipe, CalendarComponent, CalendarIntoPipeModule, CheckboxComponent, CheckboxIntoPipeModule, CommonPipesModule, ComponentPool, ConditionalPipe, EmailComponent, EmailIntoPipeModule, EmailPipe, FontComponent, FontIntoPipeModule, FontPipe, ImageComponent, ImageIntoPipeModule, ImagePipe, InToPipe, InputComponent, InputGroupComponent, InputGroupIntoPipeModule, InputIntoPipeModule, IntoDirective, IntoPipeModule, JoinPipe, JsonComponent, JsonIntoPipeModule, LastUpdateComponent, LastUpdateIntoPipeModule, LikeComponent, LikeIntoPipeModule, LinkComponent, LinkIntoPipeModule, LinkPipe, MapPipe, MaskPipe, NoticeComponent, NoticeIntoPipeModule, NoticePipe, PhoneComponent, PhoneIntoPipeModule, PhonePipe, PrependPipe, RatingComponent, RatingIntoPipeModule, RatingPipe, SanitizeHtmlPipe, SelectComponent, SelectIntoPipeModule, ShareComponent, ShareIntoPipeModule, SliderComponent, SliderIntoPipeModule, SpanComponent, SpanIntoPipeModule, SwitchComponent, SwitchIntoPipeModule, TableComponent, TableIntoPipeModule, TablePipe, TextComponent, TextIntoPipeModule, ValueOfPipe, VideoComponent, VideoIntoPipeModule, VideoPipe, WrapPipe };
//# sourceMappingURL=sedeh-into-pipes.mjs.map
